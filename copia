<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="NETWORK IN FOCO">
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.38.0/dist/umd/supabase.min.js"></script>
    <title>NETWORK IN FOCO</title>
    <style>
       :root {
    --primary-color: #1a365d;
    --secondary-color: #2b6cb0;
    --accent-color: #e53e3e;
    --light-color: #f7fafc;
    --dark-color: #2d3748;
    --success-color: #38a169;
    --warning-color: #d69e2e;
    --admin-color: #805ad5;
    --user-color: #319795;
    --pending-color: #d69e2e;
    --partner-color: #dd6b20;
    --store-color: #38a169;
    --birthday-color: #d53f8c;
    --shadow: 0 4px 6px rgba(0, 0, 0, 0.07), 0 1px 3px rgba(0, 0, 0, 0.1);
    --transition: all 0.3s ease;
    --radius: 8px;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
    background-color: #f8f9fa;
    color: var(--dark-color);
    line-height: 1.6;
}

.container {
    width: 90%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 15px;
}

/* Header Styles - MELHORADO */
header {
    background: linear-gradient(135deg, var(--primary-color) 0%, #2c5282 100%);
    color: white;
    padding: 0;
    box-shadow: var(--shadow);
    position: sticky;
    top: 0;
    z-index: 1000;
    border-bottom: 3px solid rgba(255,255,255,0.1);
}

.header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0;
    position: relative;
}

/* Logo Styles - MELHORADO */
.logo {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-shrink: 0;
}

.logo-image {
    width: 60px;
    height: 60px;
    border-radius: 8px;
    overflow: hidden;
    border: 2px solid rgba(255,255,255,0.2);
    box-shadow: var(--shadow);
    transition: var(--transition);
    flex-shrink: 0;
}

.logo-image:hover {
    transform: scale(1.05);
    border-color: rgba(255,255,255,0.4);
}

.logo-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.logo-text {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.logo-text h1 {
    margin: 0;
    font-size: 1.4rem;
    font-weight: 700;
    color: white;
    line-height: 1.2;
    letter-spacing: -0.5px;
}

.logo-text h2 {
    margin: 0.2rem 0 0 0;
    font-size: 0.7rem;
    color: #90cdf4;
    font-weight: normal;
    opacity: 0.9;
}

.logo-text h2 b {
    color: #63b3ed;
    font-weight: 600;
}

/* Header Right Section - NOVO */
.header-right {
    display: flex;
    align-items: center;
    gap: 2rem;
}

.header-actions {
    display: flex;
    gap: 0.8rem;
    align-items: center;
}

/* Botões Melhorados */
.admin-access-btn {
    background: var(--admin-color);
    color: white;
    border: none;
    padding: 0.6rem 1.2rem;
    border-radius: var(--radius);
    cursor: pointer;
    font-weight: 500;
    transition: var(--transition);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

.admin-access-btn:hover {
    background: #6b46c1;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
}

.admin-access-btn.logout {
    background-color: var(--accent-color);
}

.admin-access-btn.logout:hover {
    background-color: #c53030;
}

.btn-icon {
    font-size: 1rem;
}

.btn-text {
    white-space: nowrap;
}

/* ================================ */
/* CORREÇÕES DO MENU - ATUALIZADAS */
/* ================================ */

/* Navegação Desktop - VISÍVEL NO DESKTOP */
.desktop-nav {
    display: flex;
}

.desktop-nav ul {
    display: flex;
    list-style: none;
    gap: 1.8rem;
    margin: 0;
    padding: 0;
    align-items: center;
}

.desktop-nav a {
    color: white;
    text-decoration: none;
    font-weight: 500;
    transition: var(--transition);
    padding: 0.5rem 0;
    position: relative;
    cursor: pointer;
    font-size: 0.95rem;
    white-space: nowrap;
}

.desktop-nav a:hover {
    color: #90cdf4;
    transform: translateY(-1px);
}

.desktop-nav a.active {
    color: #90cdf4;
}

.desktop-nav a.active::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: #90cdf4;
    transform: scaleX(1);
    transition: transform 0.3s ease;
}

.desktop-nav a::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: #90cdf4;
    transform: scaleX(0);
    transition: transform 0.3s ease;
}

.desktop-nav a:hover::after {
    transform: scaleX(1);
}

/* Menu Mobile - ESCONDIDO NO DESKTOP */
.mobile-menu-btn {
    display: none;
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0.5rem;
    flex-direction: column;
    gap: 4px;
    width: 30px;
    height: 30px;
    justify-content: center;
    align-items: center;
}

.mobile-menu-btn span {
    display: block;
    width: 20px;
    height: 2px;
    background: white;
    transition: var(--transition);
    border-radius: 1px;
}

.mobile-nav {
    display: none;
    background: linear-gradient(135deg, var(--primary-color) 0%, #2c5282 100%);
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    border-top: 1px solid rgba(255,255,255,0.1);
}

.mobile-nav ul {
    list-style: none;
    padding: 1rem 0;
    margin: 0;
}

.mobile-nav li {
    border-bottom: 1px solid rgba(255,255,255,0.1);
}

.mobile-nav li:last-child {
    border-bottom: none;
}

.mobile-nav a {
    display: block;
    color: white;
    text-decoration: none;
    padding: 1rem 1.5rem;
    font-weight: 500;
    transition: var(--transition);
}

.mobile-nav a:hover,
.mobile-nav a.active {
    background: rgba(255,255,255,0.1);
    color: #90cdf4;
}

/* ================================ */
/* MEDIA QUERIES PARA RESPONSIVIDADE */
/* ================================ */

/* Tablet */
@media (max-width: 1024px) {
    .header-content {
        padding: 0.8rem 0;
    }
    
    .desktop-nav ul {
        gap: 1.2rem;
    }
    
    .logo-text h1 {
        font-size: 1.2rem;
    }
    
    .logo-text h2 {
        font-size: 0.65rem;
    }
}

/* Mobile - MENU RECOLHIDO */
@media (max-width: 768px) {
    /* Esconde menu desktop no mobile */
    .desktop-nav {
        display: none !important;
    }
    
    /* Mostra botão hamburguer no mobile */
    .mobile-menu-btn {
        display: flex !important;
    }
    
    /* Menu mobile - INICIALMENTE RECOLHIDO */
    .mobile-nav {
        display: none; /* Começa escondido */
    }
    
    .mobile-nav.show {
        display: block; /* Aparece quando ativo */
    }
    
    /* Ajustes para mobile */
    .logo {
        gap: 0.8rem;
    }
    
    .logo-image {
        width: 50px;
        height: 50px;
    }
    
    .logo-text h1 {
        font-size: 1.1rem;
    }
    
    .logo-text h2 {
        font-size: 0.6rem;
    }
    
    .admin-access-btn {
        padding: 0.5rem 1rem;
        font-size: 0.8rem;
    }
    
    .btn-text {
        display: none;
    }
    
    .admin-access-btn {
        padding: 0.6rem;
    }

    .hero h2 {
        font-size: 2.2rem;
    }

    .hero p {
        font-size: 1.1rem;
    }

    .form-row {
        flex-direction: column;
        gap: 0;
    }

    .tabs {
        flex-direction: column;
    }

    .tab {
        text-align: center;
        border-bottom: 1px solid #e2e8f0;
        border-left: 3px solid transparent;
    }

    .tab.active {
        border-left-color: var(--secondary-color);
        border-bottom-color: #e2e8f0;
    }

    .tab.admin.active {
        border-left-color: var(--admin-color);
    }

    .tab.user.active {
        border-left-color: var(--user-color);
    }

    .tab.partner.active {
        border-left-color: var(--partner-color);
    }

    .tab.store.active {
        border-left-color: var(--store-color);
    }

    .global-notification {
        top: 10px;
        right: 10px;
        left: 10px;
    }

    .sync-status {
        top: 60px;
        left: 10px;
    }

    .event-chat-messages {
        height: 250px;
    }

    .gallery-modal-close {
        top: 10px;
        right: 10px;
        width: 40px;
        height: 40px;
        font-size: 1.2rem;
    }

    .gallery-nav {
        width: 40px;
        height: 40px;
        font-size: 1.2rem;
    }
    
    /* Ajuste para cards em mobile */
    .card-image {
        height: 220px;
    }
    
    .card-image img {
        object-position: center 25%;
    }
}

/* Celular pequeno */
@media (max-width: 480px) {
    .header-content {
        padding: 0.6rem 0;
    }
    
    .logo {
        gap: 0.6rem;
    }
    
    .logo-image {
        width: 45px;
        height: 45px;
    }
    
    .logo-text h1 {
        font-size: 1rem;
    }
    
    .logo-text h2 {
        font-size: 0.55rem;
    }
    
    .header-actions {
        gap: 0.5rem;
    }
}

/* ================================ */
/* ANIMAÇÕES DO MENU MOBILE */
/* ================================ */

.mobile-menu-btn.active span:nth-child(1) {
    transform: rotate(45deg) translate(6px, 6px);
}

.mobile-menu-btn.active span:nth-child(2) {
    opacity: 0;
}

.mobile-menu-btn.active span:nth-child(3) {
    transform: rotate(-45deg) translate(6px, -6px);
}

/* ================================ */
/* ESTILOS RESTANTES (mantidos do original) */
/* ================================ */

/* Hero Section */
.hero {
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
    color: white;
    padding: 5rem 0;
    text-align: center;
    position: relative;
    overflow: hidden;
}

.hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 100" fill="%23ffffff" opacity="0.05"><polygon points="0,0 1000,50 1000,100 0,100"/></svg>');
    background-size: cover;
}

.hero h2 {
    font-size: 2.8rem;
    margin-bottom: 1.5rem;
    font-weight: 700;
    position: relative;
}

.hero p {
    font-size: 1.3rem;
    max-width: 700px;
    margin: 0 auto 2.5rem;
    opacity: 0.9;
    position: relative;
}

.btn {
    display: inline-block;
    background-color: var(--accent-color);
    color: white;
    padding: 0.9rem 1.8rem;
    border: none;
    border-radius: var(--radius);
    font-weight: 600;
    text-decoration: none;
    cursor: pointer;
    transition: var(--transition);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.btn:hover {
    background-color: #c53030;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

.btn-secondary {
    background-color: transparent;
    border: 2px solid white;
}

.btn-secondary:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

.btn-admin {
    background-color: var(--admin-color);
}

.btn-admin:hover {
    background-color: #6b46c1;
}

.btn-user {
    background-color: var(--user-color);
}

.btn-user:hover {
    background-color: #2c7a7b;
}

.btn-pending {
    background-color: var(--pending-color);
}

.btn-pending:hover {
    background-color: #b7791f;
}

.btn-partner {
    background-color: var(--partner-color);
}

.btn-partner:hover {
    background-color: #c05621;
}

.btn-store {
    background-color: var(--store-color);
}

.btn-store:hover {
    background-color: #2f855a;
}

.btn-birthday {
    background-color: var(--birthday-color);
}

.btn-birthday:hover {
    background-color: #b83280;
}

/* Main Content */
main {
    padding: 4rem 0;
}

.section-title {
    text-align: center;
    margin-bottom: 3rem;
    position: relative;
    font-size: 2.2rem;
    font-weight: 700;
    color: var(--primary-color);
}

.section-title::after {
    content: '';
    display: block;
    width: 100px;
    height: 4px;
    background: linear-gradient(to right, var(--secondary-color), var(--accent-color));
    margin: 0.8rem auto;
    border-radius: 2px;
}

.section-title.admin::after {
    background: linear-gradient(to right, var(--admin-color), #9f7aea);
}

.section-title.user::after {
    background: linear-gradient(to right, var(--user-color), #4fd1c7);
}

.section-title.partner::after {
    background: linear-gradient(to right, var(--partner-color), #ed8936);
}

.section-title.store::after {
    background: linear-gradient(to right, var(--store-color), #48bb78);
}

/* Forms */
.form-container {
    background-color: white;
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    padding: 2.5rem;
    margin-bottom: 2rem;
    border: 1px solid #e2e8f0;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: var(--dark-color);
}

.form-control {
    width: 100%;
    padding: 0.9rem;
    border: 1px solid #cbd5e0;
    border-radius: var(--radius);
    font-size: 1rem;
    transition: var(--transition);
    background-color: #f7fafc;
}

.form-control:focus {
    border-color: var(--secondary-color);
    outline: none;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.2);
    background-color: white;
}

.form-row {
    display: flex;
    gap: 1.5rem;
}

.form-row .form-group {
    flex: 1;
}

/* Image Upload */
.image-upload-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 1.5rem;
}

/* Para a prévia no formulário - ajuste importante */
.image-preview {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    overflow: hidden;
    margin-bottom: 1rem;
    border: 4px solid #e2e8f0;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    box-shadow: var(--shadow);
}

/* Nova classe para fotos que devem mostrar conteúdo completo */
.show-full-photo {
    object-fit: contain;
    background-color: #f8f9fa;
    padding: 5px;
}

.image-preview img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center 30%; /* Mesmo ajuste para preview */
}

.image-preview.sponsor,
.image-preview.partner,
.image-preview.store {
    border-radius: var(--radius);
    width: 200px;
    height: 120px;
}

.image-preview .placeholder {
    color: #a0aec0;
    text-align: center;
    font-size: 0.9rem;
}

.image-upload-btn {
    display: inline-block;
    background-color: var(--secondary-color);
    color: white;
    padding: 0.7rem 1.4rem;
    border: none;
    border-radius: var(--radius);
    font-weight: 500;
    cursor: pointer;
    transition: var(--transition);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.image-upload-btn:hover {
    background-color: #2c5282;
    transform: translateY(-1px);
}

.image-upload-input {
    display: none;
}

/* Multiple Photos Upload */
.multiple-photos-container {
    margin-bottom: 1.5rem;
}

.photos-upload-area {
    border: 2px dashed #cbd5e0;
    border-radius: var(--radius);
    padding: 2rem;
    text-align: center;
    margin-top: 1rem;
    cursor: pointer;
    transition: var(--transition);
    background-color: #f8f9fa;
}

.photos-upload-area:hover {
    border-color: var(--secondary-color);
    background-color: rgba(66, 153, 225, 0.05);
}

.photos-preview {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 10px;
    margin-top: 1rem;
}

.photo-preview-item {
    position: relative;
    width: 120px;
    height: 120px;
    border-radius: var(--radius);
    overflow: hidden;
    box-shadow: var(--shadow);
}

.photo-preview-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.remove-photo {
    position: absolute;
    top: 5px;
    right: 5px;
    background-color: rgba(229, 62, 62, 0.8);
    color: white;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 0.8rem;
}

/* Versão alternativa para fotos quadradas */
.card-image.member {
    width: 100%;
    height: 250px; /* Um pouco mais alto para fotos de perfil */
    overflow: hidden;
    position: relative;
    background-color: #f8f9fa;
}

.card-image.member img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center top; /* Foca no rosto */
}

/* Event Gallery */
.event-gallery {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 10px;
    margin-top: 1rem;
}

.event-gallery-item {
    position: relative;
    width: 100px;
    height: 100px;
    border-radius: var(--radius);
    overflow: hidden;
    cursor: pointer;
    transition: var(--transition);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.event-gallery-item:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.event-gallery-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.photos-info {
    margin-top: 0.5rem;
    font-size: 0.9rem;
    color: #666;
}

.view-photos-btn {
    background: var(--secondary-color);
    color: white;
    border: none;
    padding: 0.3rem 0.8rem;
    border-radius: var(--radius);
    cursor: pointer;
    font-size: 0.8rem;
    margin-top: 0.5rem;
    transition: var(--transition);
}

.view-photos-btn:hover {
    background: #2c5282;
}

/* Gallery Modal */
.gallery-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.9);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 10002;
}

.gallery-modal-content {
    max-width: 90%;
    max-height: 90%;
    position: relative;
}

.gallery-modal-content img {
    max-width: 100%;
    max-height: 90vh;
    object-fit: contain;
}

.gallery-modal-close {
    position: absolute;
    top: 20px;
    right: 20px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    font-size: 1.5rem;
    cursor: pointer;
    z-index: 10003;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: var(--transition);
    backdrop-filter: blur(5px);
}

.gallery-modal-close:hover {
    background: rgba(0, 0, 0, 0.9);
    transform: scale(1.1);
}

.gallery-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255,255,255,0.2);
    color: white;
    border: none;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    font-size: 1.5rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: var(--transition);
}

.gallery-nav:hover {
    background: rgba(255,255,255,0.3);
}

.gallery-nav.prev {
    left: 20px;
}

.gallery-nav.next {
    right: 20px;
}

.gallery-counter {
    position: absolute;
    bottom: -40px;
    left: 50%;
    transform: translateX(-50%);
    color: white;
    font-size: 1rem;
    text-align: center;
}

/* Cards */
.cards-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 2rem;
}

.card {
    background-color: white;
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    overflow: hidden;
    transition: var(--transition);
    position: relative;
    border: 1px solid #e2e8f0;
}

.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 25px rgba(0, 0, 0, 0.1);
}

.card-actions {
    position: absolute;
    top: 10px;
    right: 10px;
    display: flex;
    gap: 5px;
    z-index: 10;
}

.card-action-btn {
    background-color: rgba(45, 55, 72, 0.8);
    color: white;
    border: none;
    border-radius: 4px;
    width: 35px;
    height: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 0.9rem;
    transition: var(--transition);
    backdrop-filter: blur(5px);
}

.card-action-btn:hover {
    background-color: rgba(45, 55, 72, 0.95);
    transform: scale(1.1);
}

.card-action-btn.delete {
    background-color: rgba(229, 62, 62, 0.9);
}

.card-action-btn.delete:hover {
    background-color: rgba(197, 48, 48, 1);
}

.card-action-btn.edit {
    background-color: rgba(66, 153, 225, 0.9);
}

.card-action-btn.edit:hover {
    background-color: rgba(49, 130, 206, 1);
}

.card-action-btn.approve {
    background-color: rgba(56, 161, 105, 0.9);
}

.card-action-btn.approve:hover {
    background-color: rgba(47, 133, 90, 1);
}

/* CORREÇÕES ESPECÍFICAS PARA FOTOS DE MEMBROS */
.card-image {
    width: 100%;
    height: 280px; /* Aumentei a altura para melhor visualização */
    overflow: hidden;
    position: relative;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    display: flex;
    align-items: center;
    justify-content: center;
}

.card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover; /* Mantém mas vamos ajustar a posição */
    object-position: center 30%; /* Foca mais no rosto - ajuste crucial! */
    transition: var(--transition);
}

/* Para fotos de perfil, ajustamos o object-position */
.member-photo {
    object-fit: cover;
    object-position: center 25%; /* Ajuste fino para focar no rosto */
}

/* Versão alternativa: usar contain para mostrar a foto inteira */
.member-photo-full {
    object-fit: contain;
    background-color: #f8f9fa;
    padding: 10px;
}

/* Container de imagem específico para membros */
.member-photo-container {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f8f9fa;
}

.card:hover .card-image img {
    transform: scale(1.05);
}

.image-counter {
    position: absolute;
    top: 10px;
    left: 10px;
    background: rgba(0,0,0,0.7);
    color: white;
    padding: 0.3rem 0.6rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

.past-event-indicator {
    position: absolute;
    top: 10px;
    left: 10px;
    background: var(--accent-color);
    color: white;
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
    z-index: 5;
}

.pending-indicator {
    position: absolute;
    top: 10px;
    left: 10px;
    background: var(--pending-color);
    color: white;
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
    z-index: 5;
}

.birthday-indicator {
    position: absolute;
    top: 10px;
    left: 10px;
    background: var(--birthday-color);
    color: white;
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
    z-index: 5;
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

.card-header {
    padding: 1.5rem;
    background: linear-gradient(135deg, var(--primary-color) 0%, #2c5282 100%);
    color: white;
}

.card-header.admin {
    background: linear-gradient(135deg, var(--admin-color) 0%, #9f7aea 100%);
}

.card-header.user {
    background: linear-gradient(135deg, var(--user-color) 0%, #4fd1c7 100%);
}

.card-header.pending {
    background: linear-gradient(135deg, var(--pending-color) 0%, #ed8936 100%);
}

.card-header.partner {
    background: linear-gradient(135deg, var(--partner-color) 0%, #ed8936 100%);
}

.card-header.store {
    background: linear-gradient(135deg, var(--store-color) 0%, #48bb78 100%);
}

.card-header.birthday {
    background: linear-gradient(135deg, var(--birthday-color) 0%, #ed64a6 100%);
}

.card-body {
    padding: 1.5rem;
}

.card-footer {
    padding: 1rem 1.5rem;
    background-color: #f8f9fa;
    border-top: 1px solid #e2e8f0;
    display: flex;
    justify-content: space-between;
}

.user-role {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    background-color: #e2e8f0;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
    color: var(--dark-color);
}

.admin-badge {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    background-color: var(--admin-color);
    color: white;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

.user-badge {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    background-color: var(--user-color);
    color: white;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

.pending-badge {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    background-color: var(--pending-color);
    color: white;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

.partner-badge {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    background-color: var(--partner-color);
    color: white;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

.store-badge {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    background-color: var(--store-color);
    color: white;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

.birthday-badge {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    background-color: var(--birthday-color);
    color: white;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

/* Tabs */
.tabs {
    display: flex;
    border-bottom: 1px solid #e2e8f0;
    margin-bottom: 2.5rem;
    flex-wrap: wrap;
    background-color: white;
    border-radius: var(--radius) var(--radius) 0 0;
    padding: 0 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.tab {
    padding: 1.2rem 1.5rem;
    cursor: pointer;
    font-weight: 500;
    transition: var(--transition);
    border-bottom: 3px solid transparent;
    color: #718096;
}

.tab.active {
    color: var(--secondary-color);
    border-bottom-color: var(--secondary-color);
}

.tab.admin.active {
    color: var(--admin-color);
    border-bottom-color: var(--admin-color);
}

.tab.user.active {
    color: var(--user-color);
    border-bottom-color: var(--user-color);
}

.tab.partner.active {
    color: var(--partner-color);
    border-bottom-color: var(--partner-color);
}

.tab.store.active {
    color: var(--store-color);
    border-bottom-color: var(--store-color);
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

/* Loading States */
.loading {
    opacity: 0.7;
    pointer-events: none;
}

.success-message {
    background-color: var(--success-color);
    color: white;
    padding: 1rem;
    border-radius: var(--radius);
    margin-bottom: 1rem;
    text-align: center;
    box-shadow: var(--shadow);
}

/* Notifications and Sync */
.global-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    background: var(--success-color);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    z-index: 10000;
    animation: slideIn 0.3s ease;
    max-width: 400px;
}

.sync-status {
    position: fixed;
    top: 10px;
    left: 10px;
    background: var(--secondary-color);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.8rem;
    z-index: 1000;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    box-shadow: var(--shadow);
}

.sync-status.offline {
    background: var(--accent-color);
}

.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.7);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    color: white;
    font-size: 1.2rem;
}

.btn-loading {
    display: none;
}

@keyframes slideIn {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
}

@keyframes slideOut {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(100%); opacity: 0; }
}

/* Chat Styles */
.event-chat-section {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #e2e8f0;
}

.event-chat-container {
    background-color: white;
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    overflow: hidden;
    border: 1px solid #e2e8f0;
    margin-top: 1.5rem;
}

.event-chat-header {
    background: linear-gradient(135deg, var(--primary-color) 0%, #2c5282 100%);
    color: white;
    padding: 1rem 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.event-chat-header h4 {
    margin: 0;
    font-size: 1.1rem;
}

.event-chat-toggle {
    background: transparent;
    color: white;
    border: 1px solid rgba(255,255,255,0.3);
    border-radius: var(--radius);
    padding: 0.5rem 1rem;
    cursor: pointer;
    transition: var(--transition);
}

.event-chat-toggle:hover {
    background: rgba(255,255,255,0.1);
}

.event-chat-messages {
    height: 300px;
    overflow-y: auto;
    padding: 1rem;
    background-color: #f8f9fa;
    display: none;
}

.event-chat-messages.open {
    display: block;
}

.event-message {
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column;
}

.event-message.sent {
    align-items: flex-end;
}

.event-message.received {
    align-items: flex-start;
}

.event-message-bubble {
    max-width: 80%;
    padding: 0.7rem 1rem;
    border-radius: 18px;
    position: relative;
    word-wrap: break-word;
}

.event-message.sent .event-message-bubble {
    background: var(--secondary-color);
    color: white;
    border-bottom-right-radius: 4px;
}

.event-message.received .event-message-bubble {
    background: white;
    color: var(--dark-color);
    border: 1px solid #e2e8f0;
    border-bottom-left-radius: 4px;
}

.event-message-info {
    font-size: 0.7rem;
    color: #a0aec0;
    margin-top: 0.3rem;
}

.event-chat-input-container {
    display: none;
    padding: 1rem;
    border-top: 1px solid #e2e8f0;
    background: white;
}

.event-chat-input-container.open {
    display: flex;
}

.event-chat-input {
    flex: 1;
    padding: 0.7rem;
    border: 1px solid #cbd5e0;
    border-radius: var(--radius);
    margin-right: 0.5rem;
    font-size: 0.9rem;
}

.event-chat-send-btn {
    background: var(--secondary-color);
    color: white;
    border: none;
    border-radius: var(--radius);
    padding: 0.7rem 1rem;
    cursor: pointer;
    transition: var(--transition);
}

.event-chat-send-btn:hover {
    background: #2c5282;
}

.no-chat-messages {
    text-align: center;
    color: #a0aec0;
    padding: 2rem;
    font-style: italic;
}

/* User Login Modal */
.user-login-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.7);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 10001;
}

.user-login-content {
    background: white;
    border-radius: var(--radius);
    padding: 2rem;
    width: 90%;
    max-width: 400px;
    box-shadow: var(--shadow);
}

.user-login-header {
    text-align: center;
    margin-bottom: 1.5rem;
}

.user-login-header h3 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}

/* Footer */
footer {
    background: var(--primary-color);
    color: white;
    padding: 3rem 0 1.5rem;
    margin-top: 4rem;
}

.footer-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
}

.footer-section h3 {
    margin-bottom: 1rem;
    font-size: 1.2rem;
    color: #90cdf4;
}

.footer-bottom {
    text-align: center;
    padding-top: 1.5rem;
    border-top: 1px solid #2d3748;
    color: #a0aec0;
    font-size: 0.9rem;
}

/* Estilos para separação de eventos */
.events-container {
    margin-bottom: 3rem;
}

.events-section {
    margin-bottom: 2.5rem;
}

.events-section-title {
    font-size: 1.8rem;
    color: var(--primary-color);
    margin-bottom: 1.5rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid var(--secondary-color);
}

.events-section-title.past {
    color: var(--accent-color);
    border-bottom-color: var(--accent-color);
}

.no-events-message {
    text-align: center;
    padding: 2rem;
    color: #666;
    font-style: italic;
    background-color: #f8f9fa;
    border-radius: var(--radius);
}

/* Birthday Reminder */
.birthday-reminder {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: linear-gradient(135deg, var(--birthday-color) 0%, #ed64a6 100%);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    z-index: 10001;
    animation: slideIn 0.3s ease;
    max-width: 500px;
    text-align: center;
    display: none;
}

.birthday-reminder.show {
    display: block;
}

.birthday-reminder h3 {
    margin-bottom: 0.5rem;
    font-size: 1.2rem;
}

.birthday-reminder p {
    margin-bottom: 0.5rem;
}

.birthday-reminder-close {
    background: transparent;
    border: none;
    color: white;
    font-size: 1.2rem;
    cursor: pointer;
    position: absolute;
    top: 10px;
    right: 15px;
}

/* Melhorias para scroll suave */
html {
    scroll-behavior: smooth;
}

/* Destaque para seções quando navegadas */
section:target {
    animation: highlightSection 2s ease;
}

@keyframes highlightSection {
    0% {
        background-color: transparent;
    }
    50% {
        background-color: rgba(66, 153, 225, 0.05);
    }
    100% {
        background-color: transparent;
    }
}

/* Melhor espaçamento entre seções */
section {
    scroll-margin-top: 100px;
}

/* Estilos para o card de aniversariantes do mês - AZUL CLARO */
.birthday-month-card {
    background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
    border: 2px solid #90caf9;
    border-radius: var(--radius);
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: var(--shadow);
    position: relative;
    overflow: hidden;
}

.birthday-month-card::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 100px;
    height: 100px;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" fill="%234299e1" opacity="0.1"><path d="M50,10 C60,10 70,15 75,25 C80,35 80,45 75,55 C70,65 60,70 50,70 C40,70 30,65 25,55 C20,45 20,35 25,25 C30,15 40,10 50,10 Z M45,30 L55,30 L55,40 L65,40 L65,50 L55,50 L55,60 L45,60 L45,50 L35,50 L35,40 L45,40 Z"/></svg>');
    background-size: contain;
    background-repeat: no-repeat;
}

.birthday-month-header {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    position: relative;
    z-index: 1;
}

.birthday-month-icon {
    font-size: 2rem;
    margin-right: 1rem;
    color: #1976d2;
}

.birthday-month-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1565c0;
    margin: 0;
}

.birthday-month-subtitle {
    font-size: 0.9rem;
    color: #546e7a;
    margin-top: 0.2rem;
}

.birthday-month-list {
    position: relative;
    z-index: 1;
}

.birthday-month-item {
    display: flex;
    align-items: center;
    padding: 0.8rem 0;
    border-bottom: 1px solid rgba(33, 150, 243, 0.2);
}

.birthday-month-item:last-child {
    border-bottom: none;
}

.birthday-month-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    margin-right: 1rem;
    border: 2px solid #42a5f5;
    flex-shrink: 0;
}

.birthday-month-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.birthday-month-info {
    flex: 1;
}

.birthday-month-name {
    font-weight: 600;
    color: var(--dark-color);
    margin-bottom: 0.2rem;
}

.birthday-month-details {
    display: flex;
    justify-content: space-between;
    font-size: 0.85rem;
    color: #546e7a;
}

.birthday-month-role {
    font-style: italic;
}

.birthday-month-date {
    font-weight: 500;
    color: #1976d2;
}

.no-birthdays-message {
    text-align: center;
    padding: 1.5rem;
    color: #546e7a;
    font-style: italic;
    position: relative;
    z-index: 1;
}

.birthday-month-actions {
    display: flex;
    justify-content: center;
    margin-top: 1rem;
    position: relative;
    z-index: 1;
}

.btn-birthday-month {
    background-color: #42a5f5;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: var(--radius);
    font-weight: 500;
    cursor: pointer;
    transition: var(--transition);
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.btn-birthday-month:hover {
    background-color: #1e88e5;
    transform: translateY(-2px);
}
    </style>
</head>
<body>
    <!-- Sync Status -->
    <div class="sync-status" id="syncStatus">
        <span>🔵</span> Conectado
    </div>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div>Carregando...</div>
    </div>

    <!-- Birthday Reminder -->
    <div class="birthday-reminder" id="birthdayReminder">
        <button class="birthday-reminder-close" onclick="closeBirthdayReminder()">✕</button>
        <h3>🎉 Aniversariantes de Hoje!</h3>
        <div id="birthdayList"></div>
    </div>

    <!-- User Login Modal -->
    <div class="user-login-modal" id="userLoginModal">
        <div class="user-login-content">
            <div class="user-login-header">
                <h3>Identifique-se para o Chat</h3>
                <p>Digite seu nome para participar da conversa</p>
            </div>
            <form id="userLoginForm">
                <div class="form-group">
                    <label for="userName">Seu Nome *</label>
                    <input type="text" id="userName" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="userEmail">Seu E-mail</label>
                    <input type="email" id="userEmail" class="form-control">
                </div>
                <button type="submit" class="btn btn-user" style="width: 100%;">
                    <span id="userLoginText">Entrar no Chat</span>
                    <div class="btn-loading">Entrando...</div>
                </button>
            </form>
        </div>
    </div>

    <!-- Admin Login Modal -->
    <div class="user-login-modal" id="adminLoginModal">
        <div class="user-login-content">
            <div class="user-login-header">
                <h3>Acesso de Administrador</h3>
                <p>Digite a senha para acessar funções administrativas</p>
            </div>
            <form id="adminLoginForm">
                <div class="form-group">
                    <label for="adminLoginPassword">Senha de Administrador *</label>
                    <input type="password" id="adminLoginPassword" class="form-control" required>
                </div>
                <button type="submit" class="btn btn-admin" style="width: 100%;">
                    <span id="adminLoginText">Entrar como Admin</span>
                    <div class="btn-loading">Entrando...</div>
                </button>
            </form>
        </div>
    </div>

    <!-- Gallery Modal -->
    <div class="gallery-modal" id="galleryModal">
        <button class="gallery-modal-close" onclick="closeGallery()" title="Fechar galeria (ESC)">
            ✕
        </button>
        <button class="gallery-nav prev" onclick="prevPhoto()" title="Foto anterior">‹</button>
        <div class="gallery-modal-content">
            <img id="galleryImage" src="" alt="Foto do evento">
        </div>
        <button class="gallery-nav next" onclick="nextPhoto()" title="Próxima foto">›</button>
        <div class="gallery-counter" id="galleryCounter"></div>
    </div>

    <!-- Header -->
    <header>
    <div class="container">
        <div class="header-content">
            <div class="logo">
                <div class="logo-image">
                    <img src="https://jywmvnxurbtziixntuuq.supabase.co/storage/v1/object/public/Imagens/LogotipoS.jpeg" 
                         alt="NETWORK IN FOCO Logo" 
                         onerror="handleLogoError(this)">
                </div>
                <div class="logo-text">
                    <h1>NETWORK IN FOCO</h1>
                    <h2>Versão 2 <b>develop</b> | © 2025</h2>
                </div>
            </div>
            
            <div class="header-right">
                <div class="header-actions">
                    <button class="admin-access-btn" onclick="showAdminLoginModal()">
                        <span class="btn-icon">🔑</span>
                        <span class="btn-text">Acesso Admin</span>
                    </button>
                    <button class="admin-access-btn logout" id="logoutBtn" style="display: none;" onclick="logout()">
                        <span class="btn-icon">🚪</span>
                        <span class="btn-text">Sair</span>
                    </button>
                </div>
                
                <nav class="desktop-nav">
                    <ul>
                        <li><a href="#inicio" class="active">Início</a></li>
                        <li><a href="#membros">Membros</a></li>
                        <li><a href="#eventos">Eventos</a></li>
                        <li><a href="#parceiros">Parceiros</a></li>
                        <li><a href="#loja">Nossa Loja</a></li>
                        <li><a href="#cadastro-publico" id="publicRegistrationMenu">Cadastre-se</a></li>
                        <li><a href="#cadastro" id="cadastroMenu" style="display: none;">Cadastro</a></li>
                    </ul>
                </nav>
                
                <button class="mobile-menu-btn" id="mobileMenuBtn">
                    <span></span>
                    <span></span>
                    <span></span>
                </button>
            </div>
        </div>
        
        <!-- Menu Mobile -->
        <nav class="mobile-nav" id="mobileNav">
            <ul>
                <li><a href="#inicio" class="active">Início</a></li>
                <li><a href="#membros">Membros</a></li>
                <li><a href="#eventos">Eventos</a></li>
                <li><a href="#parceiros">Parceiros</a></li>
                <li><a href="#loja">Nossa Loja</a></li>
                <li><a href="#cadastro-publico" id="publicRegistrationMenuMobile">Cadastre-se</a></li>
                <li><a href="#cadastro" id="cadastroMenuMobile" style="display: none;">Cadastro</a></li>
            </ul>
        </nav>
    </div>
</header>

    <!-- Hero Section -->
    <section class="hero" id="inicio">
        <div class="container">
            <h2>Conecte-se, Compartilhe e Cresça.</h2>
            <p>Aqui você interage com outras pessoas e conecta-se a oportunidades.</p>
        </div>
    </section>

    <!-- Main Content -->
    <main class="container">
        <!-- Members Section -->
        <section id="membros">
            <h2 class="section-title">Nossos Membros</h2>
            
            <!-- Card de Aniversariantes do Mês -->
            <div class="birthday-month-card" id="birthdayMonthCard" style="display: none;">
                <div class="birthday-month-header">
                    <div class="birthday-month-icon">🎂</div>
                    <div>
                        <h3 class="birthday-month-title">Aniversariantes do Mês</h3>
                        <p class="birthday-month-subtitle" id="birthdayMonthSubtitle"></p>
                    </div>
                </div>
                <div class="birthday-month-list" id="birthdayMonthList">
                    <!-- Aniversariantes serão inseridos aqui -->
                </div>
                <div class="birthday-month-actions">
                    <button class="btn-birthday-month" onclick="toggleBirthdayMonthCard()">
                        <span id="birthdayMonthToggleText">Recolher</span>
                        <span>▼</span>
                    </button>
                </div>
            </div>
            
            <div class="cards-grid" id="members-list">
                <!-- Members will be dynamically added here -->
            </div>
        </section>

        <!-- Events Section -->
        <section id="eventos">
            <h2 class="section-title">Eventos</h2>
            <div class="events-container" id="events-container">
                <!-- Events will be dynamically added here -->
            </div>
        </section>

        <!-- Partners Section -->
        <section id="parceiros">
            <h2 class="section-title partner">Nossos Parceiros</h2>
            <div class="cards-grid" id="partners-list">
                <!-- Partners will be dynamically added here -->
            </div>
        </section>

        <!-- Store Section -->
        <section id="loja">
            <h2 class="section-title store">Nossa Loja</h2>
            <div class="cards-grid" id="store-items-list">
                <!-- Store items will be dynamically added here -->
            </div>
        </section>

        <!-- Public Registration Section -->
        <section id="cadastro-publico">
            <h2 class="section-title">Cadastre-se como Membro</h2>
            <div class="form-container">
                <div class="pending-badge" style="margin-bottom: 1.5rem; text-align: center;">
                    ⏳ Seu cadastro ficará em análise e será liberado após aprovação
                </div>
                <form id="publicMemberRegistrationForm">
                    <div class="image-upload-container">
                        <div class="image-preview" id="publicMemberPhotoPreview">
                            <div class="placeholder">Foto do Membro</div>
                        </div>
                        <input type="file" id="publicMemberPhoto" class="image-upload-input" accept="image/*">
                        <label for="publicMemberPhoto" class="image-upload-btn">Selecionar Foto</label>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="publicMemberName">Nome Completo *</label>
                            <input type="text" id="publicMemberName" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="publicMemberEmail">E-mail *</label>
                            <input type="email" id="publicMemberEmail" class="form-control" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="publicMemberPhone">Telefone *</label>
                            <input type="tel" id="publicMemberPhone" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="publicMemberRole">Cargo/Função *</label>
                            <input type="text" id="publicMemberRole" class="form-control" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="publicMemberBirthday">Data de Aniversário *</label>
                            <input type="date" id="publicMemberBirthday" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label for="publicMemberLinkedin">LinkedIn (opcional)</label>
                            <input type="url" id="publicMemberLinkedin" class="form-control" placeholder="https://linkedin.com/in/seu-perfil">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="publicMemberBio">Biografia/Descrição *</label>
                        <textarea id="publicMemberBio" class="form-control" rows="4" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-pending" id="publicMemberSubmitBtn">
                        <span id="publicMemberSubmitText">Enviar para Aprovação</span>
                        <div class="btn-loading">Enviando...</div>
                    </button>
                </form>
            </div>
        </section>

        <!-- Admin Registration Section -->
        <section id="cadastro" style="display: none;">
            <h2 class="section-title admin">Painel do Administrador</h2>
            
            <!-- Pending Members Section -->
            <div class="form-container" id="pending-members-section" style="display: none;">
                <h3 style="margin-bottom: 1.5rem; color: var(--pending-color);">📋 Membros Aguardando Aprovação</h3>
                <div class="cards-grid" id="pending-members-list">
                    <!-- Pending members will be dynamically added here -->
                </div>
            </div>

            <div class="tabs">
                <div class="tab active" data-tab="member">Cadastrar Membro</div>
                <div class="tab" data-tab="event">Cadastrar Evento</div>
                <div class="tab" data-tab="partner">Cadastrar Parceiro</div>
                <div class="tab" data-tab="store">Cadastrar Item da Loja</div>
            </div>

            <!-- Member Form -->
            <div class="tab-content active" id="member-form">
                <div class="form-container">
                    <form id="memberRegistrationForm">
                        <div class="image-upload-container">
                            <div class="image-preview" id="memberPhotoPreview">
                                <div class="placeholder">Foto do Membro</div>
                            </div>
                            <input type="file" id="memberPhoto" class="image-upload-input" accept="image/*">
                            <label for="memberPhoto" class="image-upload-btn">Selecionar Foto</label>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="memberName">Nome Completo *</label>
                                <input type="text" id="memberName" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="memberEmail">E-mail *</label>
                                <input type="email" id="memberEmail" class="form-control" required>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="memberPhone">Telefone</label>
                                <input type="tel" id="memberPhone" class="form-control">
                            </div>
                            <div class="form-group">
                                <label for="memberBirthday">Data de Aniversário *</label>
                                <input type="date" id="memberBirthday" class="form-control" required>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="memberRole">Cargo/Função *</label>
                                <input type="text" id="memberRole" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="memberLinkedin">LinkedIn (opcional)</label>
                                <input type="url" id="memberLinkedin" class="form-control" placeholder="https://linkedin.com/in/seu-perfil">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="memberBio">Biografia/Descrição *</label>
                            <textarea id="memberBio" class="form-control" rows="4" required></textarea>
                        </div>
                        <button type="submit" class="btn" id="memberSubmitBtn">
                            <span id="memberSubmitText">Cadastrar Membro</span>
                            <div class="btn-loading">Enviando...</div>
                        </button>
                    </form>
                </div>
            </div>

            <!-- Event Form -->
            <div class="tab-content" id="event-form">
                <div class="form-container">
                    <form id="eventRegistrationForm">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="eventTitle">Título do Evento *</label>
                                <input type="text" id="eventTitle" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="eventDate">Data do Evento *</label>
                                <input type="date" id="eventDate" class="form-control" required>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="eventTime">Horário *</label>
                                <input type="time" id="eventTime" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="eventLocation">Local *</label>
                                <input type="text" id="eventLocation" class="form-control" required>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="eventDescription">Descrição do Evento *</label>
                            <textarea id="eventDescription" class="form-control" rows="4" required></textarea>
                        </div>
                        
                        <!-- Área para múltiplas fotos do evento -->
                        <div class="multiple-photos-container">
                            <label>Fotos do Evento (Múltiplas)</label>
                            <div class="photos-upload-area" id="eventPhotosUploadArea">
                                <p>📷 Clique aqui ou arraste fotos para adicionar</p>
                                <p style="font-size: 0.8rem; color: #666;">Você pode selecionar várias fotos (máx. 20)</p>
                            </div>
                            <input type="file" id="eventPhotos" class="image-upload-input" accept="image/*" multiple style="display: none;">
                            <div class="photos-preview" id="eventPhotosPreview">
                                <!-- Preview das fotos será adicionado aqui -->
                            </div>
                        </div>

                        <button type="submit" class="btn" id="eventSubmitBtn">
                            <span id="eventSubmitText">Cadastrar Evento</span>
                            <div class="btn-loading">Enviando...</div>
                        </button>
                    </form>
                </div>
            </div>

            <!-- Partner Form -->
            <div class="tab-content" id="partner-form">
                <div class="form-container">
                    <form id="partnerRegistrationForm">
                        <div class="image-upload-container">
                            <div class="image-preview partner" id="partnerLogoPreview">
                                <div class="placeholder">Logo do Parceiro</div>
                            </div>
                            <input type="file" id="partnerLogo" class="image-upload-input" accept="image/*">
                            <label for="partnerLogo" class="image-upload-btn">Selecionar Logo</label>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="partnerName">Nome do Parceiro *</label>
                                <input type="text" id="partnerName" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="partnerCategory">Categoria *</label>
                                <input type="text" id="partnerCategory" class="form-control" required placeholder="Ex: Tecnologia, Alimentação, etc.">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="partnerWebsite">Website</label>
                                <input type="url" id="partnerWebsite" class="form-control" placeholder="https://exemplo.com">
                            </div>
                            <div class="form-group">
                                <label for="partnerContact">Contato</label>
                                <input type="text" id="partnerContact" class="form-control" placeholder="Email ou telefone">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="partnerDescription">Descrição do Parceiro *</label>
                            <textarea id="partnerDescription" class="form-control" rows="4" required></textarea>
                        </div>
                        <button type="submit" class="btn btn-partner" id="partnerSubmitBtn">
                            <span id="partnerSubmitText">Cadastrar Parceiro</span>
                            <div class="btn-loading">Enviando...</div>
                        </button>
                    </form>
                </div>
            </div>

            <!-- Store Form -->
            <div class="tab-content" id="store-form">
                <div class="form-container">
                    <form id="storeRegistrationForm">
                        <div class="image-upload-container">
                            <div class="image-preview store" id="storeItemPhotoPreview">
                                <div class="placeholder">Foto do Produto</div>
                            </div>
                            <input type="file" id="storeItemPhoto" class="image-upload-input" accept="image/*">
                            <label for="storeItemPhoto" class="image-upload-btn">Selecionar Foto</label>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="storeItemName">Nome do Produto *</label>
                                <input type="text" id="storeItemName" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="storeItemCategory">Categoria *</label>
                                <input type="text" id="storeItemCategory" class="form-control" required placeholder="Ex: Camiseta, Caneca, Livro, etc.">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="storeItemPrice">Preço *</label>
                                <input type="number" id="storeItemPrice" class="form-control" step="0.01" min="0" required>
                            </div>
                            <div class="form-group">
                                <label for="storeItemStock">Estoque Disponível</label>
                                <input type="number" id="storeItemStock" class="form-control" min="0" value="1">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="storeItemDescription">Descrição do Produto *</label>
                            <textarea id="storeItemDescription" class="form-control" rows="4" required></textarea>
                        </div>
                        <div class="form-group">
                            <label for="storeItemLink">Link para Compra (opcional)</label>
                            <input type="url" id="storeItemLink" class="form-control" placeholder="https://exemplo.com/produto">
                        </div>
                        <button type="submit" class="btn btn-store" id="storeSubmitBtn">
                            <span id="storeSubmitText">Cadastrar Item</span>
                            <div class="btn-loading">Enviando...</div>
                        </button>
                    </form>
                </div>
            </div>
        </section>
    </main>

    <!-- Footer -->
    <footer>
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3>Sobre Nós</h3>
                    <p>NETWORK IN FOCO é uma plataforma dedicada a conectar pessoas e promover eventos que fazem a diferença.</p>
                </div>
                <div class="footer-section">
                    <h3>Contato</h3>
                    <p>Email: networkinfoco@gmail.com</p>
                    <p>Telefone: (62) 998604763</p>
                </div>
                <div class="footer-section">
                    <h3>Redes Sociais</h3>
                    <p>Facebook: networkinfoco</p>
                    <p>Instagram: @networkinfoco</p>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2025 NETWORK IN FOCO Todos os direitos reservados.</p>
                <p style="margin-top: 0.5rem; font-size: 0.8rem;">
                    Desenvolvido por <strong>WSB Segurança da Informação</strong>
                </p>
            </div>
        </div>
    </footer>

<script>
    // ========== CONFIGURAÇÃO DO SUPABASE ==========
    const SUPABASE_URL = 'https://jywmvnxurbtziixntuuq.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp5d212bnh1cmJ0emlpeG50dXVxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0OTQ4NzMsImV4cCI6MjA3NTA3MDg3M30.XQ_nZV8E-ifNzFmNggRtlhKETIIt-Kw3skjOsE56xFk';
    
    // ========== VARIÁVEIS GLOBAIS ==========
    let supabase;
    let users = [];
    let members = [];
    let pendingMembers = [];
    let events = [];
    let partners = [];
    let storeItems = [];
    let isOnline = true;
    let currentUser = null;
    let currentEditingMemberId = null;
    let currentEditingEventId = null;
    let currentEditingPartnerId = null;
    let currentEditingStoreItemId = null;
    let eventChats = {};
    let adminPassword = "NIF25@#";
    let eventPhotosFiles = [];
    
    // Variáveis para galeria
    let currentGalleryEvent = null;
    let currentPhotoIndex = 0;

    // Variáveis para gerenciar fotos existentes
    let currentEditingEventPhotos = []; // URLs das fotos atuais do evento sendo editado
    let photosToDelete = []; // URLs das fotos que serão deletadas

    // ========== DOM ELEMENTS ==========
    const membersList = document.getElementById('members-list');
    const eventsContainer = document.getElementById('events-container');
    const partnersList = document.getElementById('partners-list');
    const storeItemsList = document.getElementById('store-items-list');
    const pendingMembersList = document.getElementById('pending-members-list');
    const pendingMembersSection = document.getElementById('pending-members-section');
    const syncStatus = document.getElementById('syncStatus');
    const loadingOverlay = document.getElementById('loadingOverlay');
    const galleryModal = document.getElementById('galleryModal');
    const galleryImage = document.getElementById('galleryImage');
    const galleryCounter = document.getElementById('galleryCounter');
    const birthdayReminder = document.getElementById('birthdayReminder');
    const birthdayList = document.getElementById('birthdayList');
    
    // Novos elementos para aniversariantes do mês
    const birthdayMonthCard = document.getElementById('birthdayMonthCard');
    const birthdayMonthList = document.getElementById('birthdayMonthList');
    const birthdayMonthSubtitle = document.getElementById('birthdayMonthSubtitle');
    const birthdayMonthToggleText = document.getElementById('birthdayMonthToggleText');

    // ========== INICIALIZAÇÃO DO SUPABASE ==========
    async function initializeSupabase() {
        try {
            if (typeof window.supabase !== 'undefined') {
                supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
                console.log('✅ Supabase inicializado com sucesso!');
                return true;
            } else {
                throw new Error('Biblioteca Supabase não carregada');
            }
        } catch (error) {
            console.error('❌ Erro ao inicializar Supabase:', error);
            setupOfflineMode();
            return false;
        }
    }

    // ========== MODO OFFLINE ==========
    function setupOfflineMode() {
        isOnline = false;
        updateSyncStatus(false);
        
        window.supabase = {
            from: (table) => ({
                select: () => ({
                    order: () => Promise.resolve({ 
                        data: loadFromLocalStorage(table) || [], 
                        error: null 
                    })
                }),
                insert: (data) => ({
                    select: () => {
                        const localData = loadFromLocalStorage(table) || [];
                        const newItem = {
                            ...data[0],
                            id: Date.now().toString(),
                            created_at: new Date().toISOString()
                        };
                        localData.unshift(newItem);
                        saveToLocalStorage(table, localData);
                        return Promise.resolve({ data: [newItem], error: null });
                    }
                }),
                update: (data) => ({
                    eq: (field, value) => {
                        const localData = loadFromLocalStorage(table) || [];
                        const index = localData.findIndex(item => item[field] === value);
                        if (index !== -1) {
                            localData[index] = { ...localData[index], ...data };
                            saveToLocalStorage(table, localData);
                        }
                        return Promise.resolve({ error: null });
                    }
                }),
                delete: () => ({
                    eq: (field, value) => {
                        const localData = loadFromLocalStorage(table) || [];
                        const filteredData = localData.filter(item => item[field] !== value);
                        saveToLocalStorage(table, filteredData);
                        return Promise.resolve({ error: null });
                    }
                })
            }),
            storage: {
                from: (bucket) => ({
                    upload: (path, file) => Promise.resolve({ data: { path }, error: null }),
                    getPublicUrl: (path) => ({ data: { publicUrl: URL.createObjectURL(file) } })
                })
            }
        };
        
        supabase = window.supabase;
    }

    function saveToLocalStorage(key, data) {
        try {
            localStorage.setItem(`network_${key}`, JSON.stringify(data));
        } catch (error) {
            console.error('Erro ao salvar no localStorage:', error);
        }
    }

    function loadFromLocalStorage(key) {
        try {
            const data = localStorage.getItem(`network_${key}`);
            return data ? JSON.parse(data) : [];
        } catch (error) {
            console.error('Erro ao carregar do localStorage:', error);
            return [];
        }
    }

    // ========== FUNÇÕES DO BANCO DE DADOS ==========
    async function loadData(table) {
        try {
            showLoading(`Carregando ${table}...`);
            
            if (isOnline) {
                const { data, error } = await supabase
                    .from(table)
                    .select('*')
                    .order('created_at', { ascending: false });
                
                if (error) throw error;
                
                const result = data || [];
                saveToLocalStorage(table, result);
                return result;
            } else {
                return loadFromLocalStorage(table);
            }
            
        } catch (error) {
            console.error(`Erro ao carregar ${table}:`, error);
            return loadFromLocalStorage(table);
        } finally {
            hideLoading();
        }
    }

    async function loadUsers() {
        try {
            users = await loadData('users');
            console.log('👥 Usuários carregados (para controle de acesso)');
        } catch (error) {
            console.error('Erro ao carregar usuários:', error);
        }
    }

    async function loadMembers() {
        try {
            const allMembers = await loadData('members');
            
            // Separar membros aprovados e pendentes
            members = allMembers.filter(member => member.approved === true);
            pendingMembers = allMembers.filter(member => member.approved !== true);
            
            console.log('📋 Membros carregados:', members.length);
            console.log('⏳ Membros pendentes:', pendingMembers.length);
            
            if (membersList) {
                renderMembers();
            }
            
            if (pendingMembersList && isCurrentUserAdmin()) {
                renderPendingMembers();
            }
            
            // Verificar aniversariantes do dia e do mês
            checkBirthdays();
            renderBirthdayMonthCard();
            
        } catch (error) {
            console.error('Erro ao carregar membros:', error);
        }
    }

    async function loadEvents() {
        try {
            events = await loadData('events');
            console.log('📅 Eventos carregados:', events);
            if (eventsContainer) {
                renderEvents();
            }
        } catch (error) {
            console.error('Erro ao carregar eventos:', error);
        }
    }

    async function loadPartners() {
        try {
            partners = await loadData('partners');
            console.log('🤝 Parceiros carregados:', partners);
            if (partnersList) {
                renderPartners();
            }
        } catch (error) {
            console.error('Erro ao carregar parceiros:', error);
        }
    }

    async function loadStoreItems() {
        try {
            storeItems = await loadData('store_items');
            console.log('🛍️ Itens da loja carregados:', storeItems);
            if (storeItemsList) {
                renderStoreItems();
            }
        } catch (error) {
            console.error('Erro ao carregar itens da loja:', error);
        }
    }

    // ========== NOVAS FUNÇÕES PARA ANIVERSARIANTES DO MÊS ==========
    function getBirthdaysThisMonth() {
        const today = new Date();
        const currentMonth = today.getMonth() + 1; // Mês atual (1-12)
        
        return members.filter(member => {
            if (!member.birthday) return false;
            
            const birthday = new Date(member.birthday);
            const birthdayMonth = birthday.getMonth() + 1;
            
            return birthdayMonth === currentMonth;
        }).sort((a, b) => {
            // Ordenar por dia do mês
            const dayA = new Date(a.birthday).getDate();
            const dayB = new Date(b.birthday).getDate();
            return dayA - dayB;
        });
    }

    function renderBirthdayMonthCard() {
        const birthdayMembers = getBirthdaysThisMonth();
        
        if (birthdayMembers.length === 0) {
            birthdayMonthCard.style.display = 'none';
            return;
        }
        
        // Atualizar subtítulo com informações do mês
        const today = new Date();
        const monthNames = [
            'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
            'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
        ];
        const currentMonthName = monthNames[today.getMonth()];
        
        birthdayMonthSubtitle.textContent = `${birthdayMembers.length} aniversariante(s) em ${currentMonthName}`;
        
        // Renderizar lista de aniversariantes
        birthdayMonthList.innerHTML = '';
        
        birthdayMembers.forEach(member => {
            const birthdayDate = new Date(member.birthday);
            const day = birthdayDate.getDate();
            const month = birthdayDate.getMonth() + 1;
            
            const birthdayItem = document.createElement('div');
            birthdayItem.className = 'birthday-month-item';
            
            birthdayItem.innerHTML = `
                <div class="birthday-month-avatar">
                    <img src="${member.photo || 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'}" 
                         alt="${member.name}" 
                         onerror="handleMemberPhotoError(this)">
                </div>
                <div class="birthday-month-info">
                    <div class="birthday-month-name">${member.name}</div>
                    <div class="birthday-month-details">
                        <span class="birthday-month-role">${member.role}</span>
                        <span class="birthday-month-date">${day}/${month.toString().padStart(2, '0')}</span>
                    </div>
                </div>
            `;
            
            birthdayMonthList.appendChild(birthdayItem);
        });
        
        // Mostrar o card
        birthdayMonthCard.style.display = 'block';
        
        // Verificar se deve recolher automaticamente após alguns dias
        const todayDay = today.getDate();
        if (todayDay > 10) {
            // Se já passou do dia 10, recolher automaticamente
            const storedState = localStorage.getItem('birthdayMonthCardExpanded');
            if (storedState !== 'true') {
                toggleBirthdayMonthCard(false);
            }
        }
    }

    function toggleBirthdayMonthCard(show) {
        const list = document.getElementById('birthdayMonthList');
        const toggleText = document.getElementById('birthdayMonthToggleText');
        
        if (show !== undefined) {
            // Forçar estado específico
            if (show) {
                list.style.display = 'block';
                toggleText.textContent = 'Recolher';
                localStorage.setItem('birthdayMonthCardExpanded', 'true');
            } else {
                list.style.display = 'none';
                toggleText.textContent = 'Expandir';
                localStorage.setItem('birthdayMonthCardExpanded', 'false');
            }
        } else {
            // Alternar estado atual
            if (list.style.display === 'none') {
                list.style.display = 'block';
                toggleText.textContent = 'Recolher';
                localStorage.setItem('birthdayMonthCardExpanded', 'true');
            } else {
                list.style.display = 'none';
                toggleText.textContent = 'Expandir';
                localStorage.setItem('birthdayMonthCardExpanded', 'false');
            }
        }
    }

    // ========== FUNÇÕES DE UPLOAD DE IMAGENS CORRIGIDAS ==========
    async function uploadImage(file, bucket, fileName) {
        try {
            console.log(`📤 Iniciando upload para bucket: ${bucket}, arquivo: ${fileName}`);
            
            if (!isOnline) {
                console.log('📴 Modo offline - usando base64');
                return new Promise((resolve) => {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        console.log('✅ Imagem convertida para base64');
                        resolve(e.target.result);
                    };
                    reader.readAsDataURL(file);
                });
            }

            // Verificar se o arquivo é uma imagem válida
            if (!file.type.startsWith('image/')) {
                throw new Error('Por favor, selecione um arquivo de imagem válido (JPG, PNG, GIF, WebP)');
            }

            // Verificar tamanho do arquivo (máx 5MB)
            if (file.size > 5 * 1024 * 1024) {
                throw new Error('A imagem deve ter menos de 5MB');
            }

            const fileExt = file.name.split('.').pop().toLowerCase();
            const validExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp'];
            
            if (!validExtensions.includes(fileExt)) {
                throw new Error('Formato de imagem não suportado. Use JPG, PNG, GIF ou WebP');
            }

            const sanitizeFileName = (name) => {
                return name
                    .normalize('NFD')
                    .replace(/[\u0300-\u036f]/g, '') // Remove acentos
                    .replace(/[^a-zA-Z0-9._-]/g, '_') // Substitui caracteres especiais por _
                    .toLowerCase();
            };
            
            const sanitizedFileName = sanitizeFileName(fileName);
            const uniqueFileName = `${sanitizedFileName}_${Date.now()}.${fileExt}`;
            
            console.log(`🔄 Fazendo upload do arquivo: ${uniqueFileName} para bucket: ${bucket}`);
            
            // Fazer upload para o Supabase Storage
            const { data, error } = await supabase.storage
                .from(bucket)
                .upload(uniqueFileName, file, {
                    cacheControl: '3600',
                    upsert: false
                });

            if (error) {
                console.error('❌ Erro no upload:', error);
                
                // Tentar com nome mais simples
                const fallbackName = `image_${Date.now()}.${fileExt}`;
                console.log(`🔄 Tentando fallback: ${fallbackName}`);
                
                const { data: fallbackData, error: fallbackError } = await supabase.storage
                    .from(bucket)
                    .upload(fallbackName, file, {
                        cacheControl: '3600',
                        upsert: false
                    });
                
                if (fallbackError) {
                    if (fallbackError.message.includes('Bucket not found')) {
                        throw new Error(`Bucket '${bucket}' não encontrado. Verifique se o bucket existe no Supabase Storage.`);
                    } else if (fallbackError.message.includes('not authorized')) {
                        throw new Error(`Sem permissão para fazer upload no bucket '${bucket}'. Verifique as políticas de acesso.`);
                    } else {
                        throw new Error(`Falha no upload: ${fallbackError.message}`);
                    }
                }
                
                const { data: { publicUrl } } = supabase.storage
                    .from(bucket)
                    .getPublicUrl(fallbackName);
                
                console.log('✅ Upload fallback concluído:', publicUrl);
                return publicUrl;
            }

            console.log('✅ Upload concluído, obtendo URL pública...');

            // Obter URL pública
            const { data: { publicUrl } } = supabase.storage
                .from(bucket)
                .getPublicUrl(uniqueFileName);

            console.log('✅ URL pública obtida:', publicUrl);
            return publicUrl;
            
        } catch (error) {
            console.error('❌ Erro completo no upload da imagem:', error);
            throw new Error(`Falha no upload da imagem: ${error.message}`);
        }
    }

    async function uploadMultipleImages(files, bucket, baseName) {
        try {
            console.log(`📤 Iniciando upload de ${files.length} imagens para o bucket: ${bucket}`);
            
            // Função para sanitizar nomes de arquivo
            const sanitizeFileName = (fileName) => {
                // Remove acentos e caracteres especiais
                return fileName
                    .normalize('NFD')
                    .replace(/[\u0300-\u036f]/g, '')
                    .replace(/[^a-zA-Z0-9._-]/g, '_')
                    .toLowerCase();
            };
            
            const uploadPromises = Array.from(files).map(async (file, index) => {
                // Validação do arquivo
                if (!file.type.startsWith('image/')) {
                    console.warn(`Arquivo não é uma imagem: ${file.name}`);
                    return null;
                }
                
                if (file.size > 5 * 1024 * 1024) {
                    console.warn(`Arquivo muito grande: ${file.name} (${file.size} bytes)`);
                    return null;
                }
                
                const fileExt = file.name.split('.').pop().toLowerCase();
                const validExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp'];
                
                if (!validExtensions.includes(fileExt)) {
                    console.warn(`Formato não suportado: ${file.name} (${fileExt})`);
                    return null;
                }
                
                // Sanitiza o nome base e gera nome único
                const sanitizedBaseName = sanitizeFileName(baseName);
                const uniqueFileName = `${sanitizedBaseName}_${Date.now()}_${index}.${fileExt}`;
                
                console.log(`🔄 Upload ${index + 1}/${files.length}: ${file.name} → ${uniqueFileName}`);
                
                if (!isOnline) {
                    console.log('📴 Modo offline - usando base64');
                    return new Promise((resolve) => {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            resolve(e.target.result);
                        };
                        reader.readAsDataURL(file);
                    });
                }

                try {
                    // Upload para o Supabase Storage
                    const { data, error } = await supabase.storage
                        .from(bucket)
                        .upload(uniqueFileName, file, {
                            cacheControl: '3600',
                            upsert: false
                        });

                    if (error) {
                        console.error(`❌ Erro no upload da imagem ${index + 1}:`, error);
                        // Tenta com nome mais simples em caso de erro
                        const fallbackName = `event_${Date.now()}_${index}.${fileExt}`;
                        console.log(`🔄 Tentando fallback: ${fallbackName}`);
                        
                        const { data: fallbackData, error: fallbackError } = await supabase.storage
                            .from(bucket)
                            .upload(fallbackName, file, {
                                cacheControl: '3600',
                                upsert: false
                            });
                        
                        if (fallbackError) {
                            console.error(`❌ Erro no fallback upload:`, fallbackError);
                            return null;
                        }
                        
                        const { data: { publicUrl } } = supabase.storage
                            .from(bucket)
                            .getPublicUrl(fallbackName);
                        
                        console.log(`✅ Upload fallback concluído: ${publicUrl}`);
                        return publicUrl;
                    }

                    console.log(`✅ Upload concluído para ${uniqueFileName}`);

                    // Obtém URL pública
                    const { data: { publicUrl } } = supabase.storage
                        .from(bucket)
                        .getPublicUrl(uniqueFileName);

                    console.log(`✅ URL pública obtida: ${publicUrl}`);
                    return publicUrl;
                } catch (uploadError) {
                    console.error(`❌ Erro no upload individual ${index + 1}:`, uploadError);
                    return null;
                }
            });
            
            const urls = await Promise.all(uploadPromises);
            const successfulUrls = urls.filter(url => url !== null && url !== undefined);
            
            console.log(`✅ Upload múltiplo concluído: ${successfulUrls.length}/${files.length} imagens salvas no bucket ${bucket}`);
            return successfulUrls;
        } catch (error) {
            console.error('❌ Erro no upload múltiplo de imagens:', error);
            throw new Error(`Falha no upload das imagens: ${error.message}`);
        }
    }

    // ========== FUNÇÃO SAVE DATA CORRIGIDA PARA EVENTOS ==========
    async function saveData(table, formData, imageFiles, buttonId, editingId = null) {
        try {
            showButtonLoading(document.getElementById(buttonId), true);
            
            console.log(`💾 Salvando dados para ${table}`, formData);
            
            // Função para sanitizar nomes de arquivo
            const sanitizeFileName = (name) => {
                return name
                    .normalize('NFD')
                    .replace(/[\u0300-\u036f]/g, '')
                    .replace(/[^a-zA-Z0-9._-]/g, '_')
                    .toLowerCase();
            };

            // PROCESSAMENTO ESPECÍFICO PARA EVENTOS
            if (table === 'events') {
                console.log('🎯 Processando evento - Fotos novas:', eventPhotosFiles.length, 'Fotos existentes:', currentEditingEventPhotos?.length || 0);
                
                let uploadedPhotoUrls = [];
                
                // Upload de novas fotos se houver
                if (eventPhotosFiles && eventPhotosFiles.length > 0) {
                    console.log(`📤 Fazendo upload de ${eventPhotosFiles.length} novas fotos`);
                    
                    try {
                        const baseName = formData.title?.replace(/\s+/g, '_').toLowerCase() || 'event';
                        const sanitizedBaseName = sanitizeFileName(baseName);
                        uploadedPhotoUrls = await uploadMultipleImages(eventPhotosFiles, 'events-photos', sanitizedBaseName);
                        console.log('✅ Novas fotos uploadadas:', uploadedPhotoUrls);
                    } catch (uploadError) {
                        console.error('❌ Erro no upload de fotos:', uploadError);
                        throw new Error(`Falha no upload das fotos: ${uploadError.message}`);
                    }
                }
                
                // Prepara os dados para salvar
                const dataToSave = { ...formData };
                
                // Combina fotos existentes (que não foram removidas) com novas fotos
                let allPhotoUrls = [];
                
                // Mantém fotos existentes que não foram marcadas para deleção
                if (currentEditingEventPhotos && currentEditingEventPhotos.length > 0) {
                    const keptPhotos = currentEditingEventPhotos.filter(photo => !photosToDelete.includes(photo));
                    allPhotoUrls = [...keptPhotos];
                    console.log('📸 Fotos existentes mantidas:', keptPhotos.length);
                }
                
                // Adiciona novas fotos
                if (uploadedPhotoUrls.length > 0) {
                    allPhotoUrls = [...allPhotoUrls, ...uploadedPhotoUrls];
                    console.log('🆕 Novas fotos adicionadas:', uploadedPhotoUrls.length);
                }
                
                dataToSave.photos = allPhotoUrls;
                console.log('✅ Todas as fotos do evento:', allPhotoUrls.length);
                
                // Deleta fotos antigas do storage se estiver online
                if (isOnline && photosToDelete.length > 0) {
                    console.log('🗑️ Deletando fotos do storage:', photosToDelete.length);
                    
                    for (const photoUrl of photosToDelete) {
                        try {
                            // Extrai o nome do arquivo da URL
                            const fileName = photoUrl.split('/').pop();
                            if (fileName) {
                                const { error } = await supabase.storage
                                    .from('events-photos')
                                    .remove([fileName]);
                                
                                if (error) {
                                    console.error('Erro ao deletar foto:', fileName, error);
                                } else {
                                    console.log('✅ Foto deletada do storage:', fileName);
                                }
                            }
                        } catch (deleteError) {
                            console.error('Erro ao deletar foto do storage:', deleteError);
                        }
                    }
                    
                    // Limpa a lista de fotos para deletar após a exclusão
                    photosToDelete = [];
                }
                
                // Salva no banco de dados
                if (isOnline) {
                    let result;
                    
                    try {
                        if (editingId) {
                            dataToSave.updated_at = new Date().toISOString();
                            
                            const { data, error } = await supabase
                                .from(table)
                                .update(dataToSave)
                                .eq('id', editingId)
                                .select();
                            
                            if (error) throw error;
                            result = data;
                            console.log('✅ Evento atualizado no banco:', result);
                        } else {
                            const { data, error } = await supabase
                                .from(table)
                                .insert([dataToSave])
                                .select();
                            
                            if (error) throw error;
                            result = data;
                            console.log('✅ Evento criado no banco:', result);
                        }
                    } catch (dbError) {
                        console.error(`❌ Erro no banco de dados:`, dbError);
                        // Fallback para salvar localmente
                        await saveDataLocally(table, dataToSave, editingId);
                        showMessage(`${getEntityName(table)} salvo localmente (erro no banco).`, 'warning');
                        return true;
                    }
                    
                    // Recarrega os dados
                    await loadEvents();
                    
                    showMessage(`${getEntityName(table)} ${editingId ? 'atualizado' : 'cadastrado'} com sucesso! ${allPhotoUrls.length} foto(s) salva(s).`, 'success');
                    return true;
                    
                } else {
                    // Modo offline
                    await saveDataLocally(table, dataToSave, editingId);
                    return true;
                }
                
            } else {
                // PROCESSAMENTO ORIGINAL PARA OUTRAS TABELAS (Membros, Parceiros, Loja)
                let imageUrl = null;
                
                if (imageFiles) {
                    const baseName = formData.name?.replace(/\s+/g, '_').toLowerCase() || 
                                    formData.title?.replace(/\s+/g, '_').toLowerCase() || 
                                    'image';
                    
                    console.log(`📤 Processando imagem para ${table}`);
                    
                    // Define o bucket correto
                    let bucketName;
                    switch(table) {
                        case 'members': bucketName = 'members-photos'; break;
                        case 'partners': bucketName = 'parceiros-photos'; break;
                        case 'store_items': bucketName = 'loja-photos'; break;
                        default: bucketName = 'images'; break;
                    }
                    
                    console.log(`🪣 Usando bucket: ${bucketName} para ${table}`);
                    
                    try {
                        const sanitizedBaseName = sanitizeFileName(baseName);
                        imageUrl = await uploadImage(imageFiles, bucketName, sanitizedBaseName);
                        console.log(`✅ Imagem uploadada com sucesso: ${imageUrl}`);
                    } catch (uploadError) {
                        console.error(`❌ Erro no upload da imagem para ${table}:`, uploadError);
                        throw new Error(`Falha no upload da imagem: ${uploadError.message}`);
                    }
                }
                
                // Prepara os dados para salvar
                const dataToSave = { ...formData };
                
                // Adiciona a URL da imagem aos dados
                if (imageUrl) {
                    if (table === 'members') {
                        dataToSave.photo = imageUrl;
                    } else if (table === 'partners') {
                        dataToSave.logo = imageUrl;
                    } else if (table === 'store_items') {
                        dataToSave.photo = imageUrl;
                    }
                }
                
                // Para membros públicos, define approved como false
                if (table === 'members' && buttonId === 'publicMemberSubmitBtn') {
                    dataToSave.approved = false;
                }
                
                if (isOnline) {
                    let result;
                    
                    try {
                        if (editingId) {
                            dataToSave.updated_at = new Date().toISOString();
                            
                            const { data, error } = await supabase
                                .from(table)
                                .update(dataToSave)
                                .eq('id', editingId)
                                .select();
                            
                            if (error) throw error;
                            result = data;
                        } else {
                            const { data, error } = await supabase
                                .from(table)
                                .insert([dataToSave])
                                .select();
                            
                            if (error) throw error;
                            result = data;
                        }
                    } catch (dbError) {
                        console.error(`❌ Erro no banco de dados para ${table}:`, dbError);
                        await saveDataLocally(table, dataToSave, editingId);
                        showMessage(`${getEntityName(table)} salvo localmente (erro no banco).`, 'warning');
                        return true;
                    }
                    
                    // Recarrega os dados específicos
                    switch(table) {
                        case 'users': 
                            await loadUsers(); 
                            break;
                        case 'members': 
                            await loadMembers(); 
                            break;
                        case 'events': 
                            await loadEvents(); 
                            break;
                        case 'partners': 
                            await loadPartners(); 
                            break;
                        case 'store_items': 
                            await loadStoreItems(); 
                            break;
                    }
                    
                    showMessage(`${getEntityName(table)} ${editingId ? 'atualizado' : 'cadastrado'} com sucesso!`, 'success');
                    return true;
                } else {
                    await saveDataLocally(table, dataToSave, editingId);
                    return true;
                }
            }
            
        } catch (error) {
            console.error(`❌ Erro ao salvar ${table}:`, error);
            showMessage(`Erro ao salvar ${getEntityName(table).toLowerCase()}: ${error.message}`, 'error');
            return false;
        } finally {
            showButtonLoading(document.getElementById(buttonId), false);
        }
    }

    // Função auxiliar para salvar dados localmente
    async function saveDataLocally(table, dataToSave, editingId = null) {
        try {
            if (editingId) {
                const localData = loadFromLocalStorage(table) || [];
                const index = localData.findIndex(item => item.id === editingId);
                if (index !== -1) {
                    localData[index] = { 
                        ...localData[index], 
                        ...dataToSave,
                        id: editingId,
                        updated_at: new Date().toISOString()
                    };
                    saveToLocalStorage(table, localData);
                    console.log(`✅ ${getEntityName(table)} atualizado localmente:`, editingId);
                } else {
                    console.warn(`${getEntityName(table)} não encontrado para atualização:`, editingId);
                    showMessage(`${getEntityName(table)} não encontrado para atualização`, 'error');
                    return;
                }
            } else {
                dataToSave.id = Date.now().toString();
                dataToSave.created_at = new Date().toISOString();
                
                const localData = loadFromLocalStorage(table) || [];
                localData.unshift(dataToSave);
                saveToLocalStorage(table, localData);
                console.log(`✅ ${getEntityName(table)} criado localmente:`, dataToSave.id);
            }
            
            // Atualiza a interface
            switch(table) {
                case 'users': 
                    users = loadFromLocalStorage('users'); 
                    break;
                case 'members': 
                    await loadMembers(); // Usa await para garantir o recarregamento
                    break;
                case 'events': 
                    events = loadFromLocalStorage('events'); 
                    renderEvents(); 
                    break;
                case 'partners': 
                    partners = loadFromLocalStorage('partners'); 
                    renderPartners(); 
                    break;
                case 'store_items': 
                    storeItems = loadFromLocalStorage('store_items'); 
                    renderStoreItems(); 
                    break;
            }
            
            showMessage(`${getEntityName(table)} salvo localmente!`, 'success');
            
        } catch (error) {
            console.error(`❌ Erro ao salvar localmente ${table}:`, error);
            throw error;
        }
    }

    // Função para obter o nome da entidade
    function getEntityName(table) {
        const names = {
            'users': 'Usuário',
            'members': 'Membro',
            'events': 'Evento',
            'partners': 'Parceiro',
            'store_items': 'Item da Loja'
        };
        return names[table] || 'Item';
    }

    // ========== FUNÇÕES DE RENDERIZAÇÃO ==========
    function renderMembers() {
        if (!membersList) {
            console.error('❌ Elemento members-list não encontrado');
            return;
        }
        
        console.log('🎯 Renderizando membros:', members);
        
        renderList(membersList, members, 'members', (member) => {
            const canEdit = isCurrentUserAdmin();
            const isBirthday = checkIfBirthdayToday(member.birthday);
            
            return `
                ${isBirthday ? '<div class="birthday-indicator">🎂 Aniversariante!</div>' : ''}
                <div class="card-actions">
                    ${canEdit ? `
                        <button class="card-action-btn edit" onclick="editMember('${member.id}')" title="Editar membro">✏️</button>
                        <button class="card-action-btn delete" onclick="deleteMember('${member.id}')" title="Excluir membro">🗑️</button>
                    ` : ''}
                </div>
                <div class="card-image">
                    <div class="member-photo-container">
                        <img src="${member.photo || 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'}" 
                             alt="${member.name}" 
                             loading="lazy"
                             class="member-photo"
                             onerror="handleMemberPhotoError(this)"
                             onclick="togglePhotoView(this)">
                    </div>
                </div>
                <div class="card-header ${isBirthday ? 'birthday' : ''}">
                    <h3>${member.name}</h3>
                    <span class="user-role">${member.role}</span>
                    ${isBirthday ? '<span class="birthday-badge">🎂 Aniversariante</span>' : ''}
                </div>
                <div class="card-body">
                    <p><strong>Email:</strong> ${member.email}</p>
                    ${member.phone ? `<p><strong>Telefone:</strong> ${member.phone}</p>` : ''}
                    ${member.birthday ? `<p><strong>Aniversário:</strong> ${formatBirthday(member.birthday)}</p>` : ''}
                    <p>${member.bio || 'Sem descrição'}</p>
                    ${member.linkedin ? `<p><strong>LinkedIn:</strong> <a href="${member.linkedin}" target="_blank">${member.linkedin}</a></p>` : ''}
                    <p style="font-size: 0.8rem; color: #666; margin-top: 1rem;">
                        Cadastrado em: ${new Date(member.created_at).toLocaleDateString('pt-BR')}
                        ${member.updated_at ? `<br>Atualizado em: ${new Date(member.updated_at).toLocaleDateString('pt-BR')}` : ''}
                    </p>
                    <div style="margin-top: 0.5rem; font-size: 0.8rem; color: #666;">
                        <small>📷 Clique na foto para alternar entre visualização completa e ajustada</small>
                    </div>
                </div>
            `;
        });
    }

    // Função auxiliar para mensagens informativas rápidas
    function showMessage(message, type = 'success', duration = 3000) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `global-notification ${type}`;
        messageDiv.textContent = message;
        messageDiv.style.background = type === 'info' ? '#4299e1' : 
                                     type === 'warning' ? '#d69e2e' : 
                                     type === 'error' ? '#e53e3e' : '#38a169';
        
        document.body.appendChild(messageDiv);
        
        setTimeout(() => {
            messageDiv.style.opacity = '1';
            messageDiv.style.transform = 'translateY(0)';
        }, 100);
        
        setTimeout(() => {
            messageDiv.style.opacity = '0';
            messageDiv.style.transform = 'translateY(-100%)';
            setTimeout(() => messageDiv.remove(), 300);
        }, duration);
    }

    // Nova função para alternar entre visualizações
    function togglePhotoView(imgElement) {
        if (imgElement.classList.contains('show-full-photo')) {
            imgElement.classList.remove('show-full-photo');
            imgElement.style.objectFit = 'cover';
            imgElement.style.objectPosition = 'center 25%';
            showMessage('Modo: Foto ajustada ao quadro', 'info', 2000);
        } else {
            imgElement.classList.add('show-full-photo');
            imgElement.style.objectFit = 'contain';
            imgElement.style.objectPosition = 'center';
            showMessage('Modo: Foto completa (pode ter bordas)', 'info', 2000);
        }
    }

    // Função melhorada para lidar com erro em fotos
    function handleMemberPhotoError(img) {
        console.log('❌ Erro ao carregar foto do membro, usando placeholder...');
        img.src = 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60';
        img.onerror = null;
        img.style.objectFit = 'cover';
        img.style.objectPosition = 'center';
    }

    function renderPendingMembers() {
        if (!pendingMembersList || !isCurrentUserAdmin()) return;
        
        console.log('⏳ Renderizando membros pendentes:', pendingMembers);
        
        if (pendingMembers.length === 0) {
            pendingMembersSection.style.display = 'none';
            return;
        }
        
        pendingMembersSection.style.display = 'block';
        
        renderList(pendingMembersList, pendingMembers, 'pending_members', (member) => {
            return `
                <div class="pending-indicator">⏳ Aguardando Aprovação</div>
                <div class="card-actions">
                    <button class="card-action-btn approve" onclick="approveMember('${member.id}')" title="Aprovar membro">✓</button>
                    <button class="card-action-btn delete" onclick="deleteMember('${member.id}')" title="Recusar membro">🗑️</button>
                </div>
                <div class="card-image">
                    <img src="${member.photo || 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'}" alt="${member.name}" loading="lazy">
                </div>
                <div class="card-header pending">
                    <h3>${member.name}</h3>
                    <span class="pending-badge">${member.role}</span>
                </div>
                <div class="card-body">
                    <p><strong>Email:</strong> ${member.email}</p>
                    ${member.phone ? `<p><strong>Telefone:</strong> ${member.phone}</p>` : ''}
                    ${member.birthday ? `<p><strong>Aniversário:</strong> ${formatBirthday(member.birthday)}</p>` : ''}
                    <p>${member.bio || 'Sem descrição'}</p>
                    ${member.linkedin ? `<p><strong>LinkedIn:</strong> <a href="${member.linkedin}" target="_blank">${member.linkedin}</a></p>` : ''}
                    <p style="font-size: 0.8rem; color: #666; margin-top: 1rem;">
                        Solicitado em: ${new Date(member.created_at).toLocaleDateString('pt-BR')}
                    </p>
                </div>
                <div class="card-footer">
                    <button class="btn btn-pending" onclick="approveMember('${member.id}')" style="flex: 1;">Aprovar</button>
                    <button class="btn btn-danger" onclick="deleteMember('${member.id}')" style="flex: 1; margin-left: 0.5rem;">Recusar</button>
                </div>
            `;
        });
    }

    function renderEvents() {
        if (!eventsContainer) {
            console.error('Elemento events-container não encontrado');
            return;
        }
        
        // Separar eventos por data
        const now = new Date();
        const upcomingEvents = [];
        const pastEvents = [];
        
        events.forEach(event => {
            const eventDateTime = new Date(`${event.event_date}T${event.event_time}`);
            if (eventDateTime >= now) {
                upcomingEvents.push(event);
            } else {
                pastEvents.push(event);
            }
        });
        
        console.log(`📅 Eventos futuros: ${upcomingEvents.length}, Eventos Realizados: ${pastEvents.length}`);
        
        // Limpar container
        eventsContainer.innerHTML = '';
        
        // Renderizar eventos futuros
        if (upcomingEvents.length > 0) {
            const upcomingSection = document.createElement('div');
            upcomingSection.className = 'events-section';
            upcomingSection.innerHTML = `
                <h3 class="events-section-title">Próximos Eventos</h3>
                <div class="cards-grid" id="upcoming-events-list"></div>
            `;
            eventsContainer.appendChild(upcomingSection);
            
            renderList(
                document.getElementById('upcoming-events-list'), 
                upcomingEvents, 
                'events', 
                createEventCardTemplate
            );
        } else {
            const noUpcomingSection = document.createElement('div');
            noUpcomingSection.className = 'events-section';
            noUpcomingSection.innerHTML = `
                <h3 class="events-section-title">Próximos Eventos</h3>
                <div class="no-events-message">
                    <p>📅 Nenhum evento futuro agendado no momento.</p>
                    <p>Fique atento para novos eventos em breve!</p>
                </div>
            `;
            eventsContainer.appendChild(noUpcomingSection);
        }
        
        // Renderizar eventos passados
        if (pastEvents.length > 0) {
            const pastSection = document.createElement('div');
            pastSection.className = 'events-section';
            pastSection.innerHTML = `
                <h3 class="events-section-title past">Eventos Passados</h3>
                <div class="cards-grid" id="past-events-list"></div>
            `;
            eventsContainer.appendChild(pastSection);
            
            renderList(
                document.getElementById('past-events-list'), 
                pastEvents, 
                'events', 
                createEventCardTemplate
            );
        }
        
        // Configura os chats após renderizar os eventos
        events.forEach(event => {
            setupEventChat(event.id);
        });
    }

    function createEventCardTemplate(event) {
        const eventDate = new Date(event.event_date);
        const formattedDate = eventDate.toLocaleDateString('pt-BR');
        const canEdit = isCurrentUserAdmin();
        const photos = event.photos || [];
        const mainPhoto = photos.length > 0 ? photos[0] : 'https://images.unsplash.com/photo-1540575467063-178a50c2df87?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60';
        
        // Verificar se é um evento passado
        const now = new Date();
        const eventDateTime = new Date(`${event.event_date}T${event.event_time}`);
        const isPastEvent = eventDateTime < now;
        
        return `
            ${isPastEvent ? '<div class="past-event-indicator">Evento Realizado</div>' : ''}
            <div class="card-actions">
                ${canEdit ? `
                    <button class="card-action-btn edit" onclick="editEvent('${event.id}')" title="Editar evento">✏️</button>
                    <button class="card-action-btn delete" onclick="deleteEvent('${event.id}')" title="Excluir evento">🗑️</button>
                ` : ''}
            </div>
            <div class="card-image">
                <img src="${mainPhoto}" alt="${event.title}" loading="lazy" onclick="openGallery('${event.id}', 0)" style="cursor: pointer;">
                ${photos.length > 1 ? `
                    <div class="image-counter" onclick="openGallery('${event.id}', 0)" style="cursor: pointer;">
                        +${photos.length - 1}
                    </div>
                ` : ''}
            </div>
            <div class="card-header">
                <h3>${event.title}</h3>
                <div class="event-date">
                    <span>${formattedDate}</span> • <span>${event.event_time}</span>
                </div>
            </div>
            <div class="card-body">
                <p><strong>Local:</strong> ${event.location}</p>
                <p>${event.description || 'Sem descrição'}</p>
                
                ${photos.length > 0 ? `
                    <div class="photos-info">
                        <strong>${photos.length} foto(s)</strong>
                        <button class="view-photos-btn" onclick="openGallery('${event.id}', 0)" title="Ver todas as fotos">
                            👁️ Ver Galeria
                        </button>
                    </div>
                    
                    <div class="event-gallery">
                        ${photos.slice(0, 4).map((photo, index) => `
                            <div class="event-gallery-item" onclick="openGallery('${event.id}', ${index})">
                                <img src="${photo}" alt="Foto ${index + 1} do evento" loading="lazy">
                            </div>
                        `).join('')}
                        ${photos.length > 4 ? `
                            <div class="event-gallery-item" onclick="openGallery('${event.id}', 0)" style="background: #3498db; color: white; display: flex; align-items: center; justify-content: center; font-weight: bold;">
                                +${photos.length - 4}
                            </div>
                        ` : ''}
                    </div>
                ` : `
                    <div class="photos-info">
                        <em>Nenhuma foto cadastrada</em>
                    </div>
                `}
                <p style="font-size: 0.8rem; color: #666; margin-top: 1rem;">
                    Criado em: ${new Date(event.created_at).toLocaleDateString('pt-BR')}
                    ${event.updated_at ? `<br>Atualizado em: ${new Date(event.updated_at).toLocaleDateString('pt-BR')}` : ''}
                </p>
            </div>
            
            <!-- Chat do Evento -->
            <div class="event-chat-section">
                <div class="event-chat-container" id="event-chat-${event.id}">
                    <div class="event-chat-header">
                        <h4>💬 Chat do Evento</h4>
                        <button class="event-chat-toggle" onclick="toggleEventChat('${event.id}')">Abrir Chat</button>
                    </div>
                    <div class="event-chat-messages">
                        <!-- Mensagens serão carregadas aqui -->
                    </div>
                    <div class="event-chat-input-container">
                        <input type="text" class="event-chat-input" placeholder="Digite sua mensagem sobre o evento...">
                        <button class="event-chat-send-btn">Enviar</button>
                    </div>
                </div>
            </div>
        `;
    }

    function renderPartners() {
        if (!partnersList) {
            console.error('❌ Elemento partners-list não encontrado');
            return;
        }
        
        console.log('🤝 Renderizando parceiros:', partners);
        
        renderList(partnersList, partners, 'partners', (partner) => {
            const canEdit = isCurrentUserAdmin();
            
            return `
                <div class="card-actions">
                    ${canEdit ? `
                        <button class="card-action-btn edit" onclick="editPartner('${partner.id}')" title="Editar parceiro">✏️</button>
                        <button class="card-action-btn delete" onclick="deletePartner('${partner.id}')" title="Excluir parceiro">🗑️</button>
                    ` : ''}
                </div>
                <div class="card-image">
                    <img src="${partner.logo || 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'}" alt="${partner.name}" loading="lazy">
                </div>
                <div class="card-header partner">
                    <h3>${partner.name}</h3>
                    <span class="partner-badge">${partner.category}</span>
                </div>
                <div class="card-body">
                    <p>${partner.description || 'Sem descrição'}</p>
                    ${partner.website ? `<p><strong>Website:</strong> <a href="${partner.website}" target="_blank">${partner.website}</a></p>` : ''}
                    ${partner.contact ? `<p><strong>Contato:</strong> ${partner.contact}</p>` : ''}
                    <p style="font-size: 0.8rem; color: #666; margin-top: 1rem;">
                        Cadastrado em: ${new Date(partner.created_at).toLocaleDateString('pt-BR')}
                        ${partner.updated_at ? `<br>Atualizado em: ${new Date(partner.updated_at).toLocaleDateString('pt-BR')}` : ''}
                    </p>
                </div>
            `;
        });
    }

    function renderStoreItems() {
        if (!storeItemsList) {
            console.error('❌ Elemento store-items-list não encontrado');
            return;
        }
        
        console.log('🛍️ Renderizando itens da loja:', storeItems);
        
        renderList(storeItemsList, storeItems, 'store_items', (item) => {
            const canEdit = isCurrentUserAdmin();
            
            return `
                <div class="card-actions">
                    ${canEdit ? `
                        <button class="card-action-btn edit" onclick="editStoreItem('${item.id}')" title="Editar item">✏️</button>
                        <button class="card-action-btn delete" onclick="deleteStoreItem('${item.id}')" title="Excluir item">🗑️</button>
                    ` : ''}
                </div>
                <div class="card-image">
                    <img src="${item.photo || 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'}" alt="${item.name}" loading="lazy">
                </div>
                <div class="card-header store">
                    <h3>${item.name}</h3>
                    <span class="store-badge">${item.category}</span>
                </div>
                <div class="card-body">
                    <p><strong>Preço:</strong> R$ ${parseFloat(item.price).toFixed(2)}</p>
                    <p><strong>Estoque:</strong> ${item.stock || 0} unidades</p>
                    <p>${item.description || 'Sem descrição'}</p>
                    ${item.link ? `<p><strong>Link para compra:</strong> <a href="${item.link}" target="_blank">Clique aqui</a></p>` : ''}
                    <p style="font-size: 0.8rem; color: #666; margin-top: 1rem;">
                        Cadastrado em: ${new Date(item.created_at).toLocaleDateString('pt-BR')}
                        ${item.updated_at ? `<br>Atualizado em: ${new Date(item.updated_at).toLocaleDateString('pt-BR')}` : ''}
                    </p>
                </div>
            `;
        });
    }

    function renderList(container, data, type, templateFunction) {
        if (!container) return;
        
        container.innerHTML = '';
        
        if (!data || data.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; grid-column: 1/-1; padding: 3rem; color: #666;">
                    <h3>📝 Nenhum ${getEntityName(type).toLowerCase()} cadastrado ainda</h3>
                    <p>Use o formulário de cadastro para adicionar o primeiro ${getEntityName(type).toLowerCase()}.</p>
                </div>
            `;
            return;
        }
        
        data.forEach(item => {
            const card = document.createElement('div');
            card.className = 'card';
            card.innerHTML = templateFunction(item);
            container.appendChild(card);
        });
    }

    // ========== FUNÇÃO DE EXCLUSÃO ==========
    async function deleteItem(table, itemId) {
        if (!confirm(`Tem certeza que deseja excluir este ${getEntityName(table).toLowerCase()}?`)) {
            return;
        }

        try {
            showLoading(`Excluindo ${getEntityName(table).toLowerCase()}...`);
            
            let currentData;
            switch(table) {
                case 'users': currentData = users; break;
                case 'members': currentData = members; break;
                case 'events': currentData = events; break;
                case 'partners': currentData = partners; break;
                case 'store_items': currentData = storeItems; break;
            }
            
            const itemToDelete = currentData.find(item => item.id == itemId);
            if (!itemToDelete) {
                throw new Error('Item não encontrado localmente');
            }

            if (isOnline) {
                const { error: dbError } = await supabase
                    .from(table)
                    .delete()
                    .eq('id', itemId);
                
                if (dbError) throw dbError;
            }
            
            const updatedData = currentData.filter(item => item.id != itemId);
            
            switch(table) {
                case 'users': users = updatedData; break;
                case 'members': members = updatedData; break;
                case 'events': events = updatedData; break;
                case 'partners': partners = updatedData; break;
                case 'store_items': storeItems = updatedData; break;
            }
            
            saveToLocalStorage(table, updatedData);
            
            switch(table) {
                case 'members': 
                    await loadMembers(); // Recarrega para atualizar membros pendentes também
                    break;
                case 'events': renderEvents(); break;
                case 'partners': renderPartners(); break;
                case 'store_items': renderStoreItems(); break;
            }
            
            showMessage(`${getEntityName(table)} excluído com sucesso!`, 'success');
            
        } catch (error) {
            console.error(`Erro ao excluir ${table}:`, error);
            showMessage(`Erro ao excluir ${getEntityName(table).toLowerCase()}: ${error.message}`, 'error');
        } finally {
            hideLoading();
        }
    }

    // ========== FUNÇÕES PARA EDITAR ==========
    async function editMember(memberId) {
        const member = members.find(m => m.id == memberId);
        if (!member) {
            showMessage('Membro não encontrado', 'error');
            return;
        }

        try {
            document.getElementById('memberName').value = member.name || '';
            document.getElementById('memberEmail').value = member.email || '';
            document.getElementById('memberPhone').value = member.phone || '';
            document.getElementById('memberBirthday').value = member.birthday || '';
            document.getElementById('memberRole').value = member.role || '';
            document.getElementById('memberLinkedin').value = member.linkedin || '';
            document.getElementById('memberBio').value = member.bio || '';

            // Atualiza o preview da foto
            const preview = document.getElementById('memberPhotoPreview');
            if (member.photo) {
                preview.innerHTML = `<img src="${member.photo}" alt="Preview">`;
            }

            document.getElementById('memberSubmitText').textContent = 'Atualizar Membro';
            currentEditingMemberId = memberId;

            document.getElementById('cadastro').scrollIntoView({ behavior: 'smooth' });
            
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            document.querySelector('.tab[data-tab="member"]').classList.add('active');
            
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById('member-form').classList.add('active');

            showMessage('Formulário preenchido para edição. Faça as alterações e clique em "Atualizar Membro".', 'success');
            
        } catch (error) {
            console.error('Erro ao preparar formulário de edição:', error);
            showMessage('Erro ao carregar dados do membro para edição', 'error');
        }
    }

    async function editEvent(eventId) {
        const event = events.find(e => e.id == eventId);
        if (!event) {
            showMessage('Evento não encontrado', 'error');
            return;
        }

        try {
            document.getElementById('eventTitle').value = event.title || '';
            document.getElementById('eventDate').value = event.event_date || '';
            document.getElementById('eventTime').value = event.event_time || '';
            document.getElementById('eventLocation').value = event.location || '';
            document.getElementById('eventDescription').value = event.description || '';

            // Salvar as fotos atuais do evento para gerenciamento
            currentEditingEventId = eventId;
            currentEditingEventPhotos = event.photos || []; // Array com as URLs atuais
            
            console.log('📸 Fotos atuais do evento:', currentEditingEventPhotos);

            // Atualizar o preview com as fotos existentes
            const preview = document.getElementById('eventPhotosPreview');
            preview.innerHTML = '';
            
            if (currentEditingEventPhotos.length > 0) {
                currentEditingEventPhotos.forEach((photoUrl, index) => {
                    const photoItem = document.createElement('div');
                    photoItem.className = 'photo-preview-item';
                    photoItem.innerHTML = `
                        <img src="${photoUrl}" alt="Foto existente ${index + 1}">
                        <button type="button" class="remove-photo" onclick="removeExistingEventPhoto(${index})" title="Remover foto">×</button>
                        <div style="position: absolute; bottom: 5px; left: 5px; background: rgba(0,0,0,0.7); color: white; padding: 2px 5px; border-radius: 3px; font-size: 0.7rem;">
                            ${index + 1}
                        </div>
                    `;
                    preview.appendChild(photoItem);
                });
                
                // Atualizar o texto da área de upload
                const uploadArea = document.getElementById('eventPhotosUploadArea');
                uploadArea.innerHTML = `
                    <p>📷 ${currentEditingEventPhotos.length} foto(s) existente(s)</p>
                    <p style="font-size: 0.8rem; color: #666;">Clique ou arraste para adicionar mais fotos</p>
                `;
            }

            //Resetar o array de novos arquivos
            eventPhotosFiles = [];

            document.getElementById('eventSubmitText').textContent = 'Atualizar Evento';

            document.getElementById('cadastro').scrollIntoView({ behavior: 'smooth' });
            
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            document.querySelector('.tab[data-tab="event"]').classList.add('active');
            
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById('event-form').classList.add('active');

            showMessage('Formulário preenchido para edição. Faça as alterações e clique em "Atualizar Evento".', 'success');
            
        } catch (error) {
            console.error('Erro ao preparar formulário de edição do evento:', error);
            showMessage('Erro ao carregar dados do evento para edição', 'error');
        }
    }

    async function editPartner(partnerId) {
        const partner = partners.find(p => p.id == partnerId);
        if (!partner) {
            showMessage('Parceiro não encontrado', 'error');
            return;
        }

        try {
            document.getElementById('partnerName').value = partner.name || '';
            document.getElementById('partnerCategory').value = partner.category || '';
            document.getElementById('partnerWebsite').value = partner.website || '';
            document.getElementById('partnerContact').value = partner.contact || '';
            document.getElementById('partnerDescription').value = partner.description || '';

            // Atualiza o preview do logo
            const preview = document.getElementById('partnerLogoPreview');
            if (partner.logo) {
                preview.innerHTML = `<img src="${partner.logo}" alt="Preview">`;
            }

            document.getElementById('partnerSubmitText').textContent = 'Atualizar Parceiro';
            currentEditingPartnerId = partnerId;

            document.getElementById('cadastro').scrollIntoView({ behavior: 'smooth' });
            
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            document.querySelector('.tab[data-tab="partner"]').classList.add('active');
            
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById('partner-form').classList.add('active');

            showMessage('Formulário preenchido para edição. Faça as alterações e clique em "Atualizar Parceiro".', 'success');
            
        } catch (error) {
            console.error('Erro ao preparar formulário de edição do parceiro:', error);
            showMessage('Erro ao carregar dados do parceiro para edição', 'error');
        }
    }

    async function editStoreItem(itemId) {
        const item = storeItems.find(i => i.id == itemId);
        if (!item) {
            showMessage('Item da loja não encontrado', 'error');
            return;
        }

        try {
            document.getElementById('storeItemName').value = item.name || '';
            document.getElementById('storeItemCategory').value = item.category || '';
            document.getElementById('storeItemPrice').value = item.price || '';
            document.getElementById('storeItemStock').value = item.stock || '';
            document.getElementById('storeItemDescription').value = item.description || '';
            document.getElementById('storeItemLink').value = item.link || '';

            // Atualiza o preview da foto
            const preview = document.getElementById('storeItemPhotoPreview');
            if (item.photo) {
                preview.innerHTML = `<img src="${item.photo}" alt="Preview">`;
            }

            document.getElementById('storeSubmitText').textContent = 'Atualizar Item';
            currentEditingStoreItemId = itemId;

            document.getElementById('cadastro').scrollIntoView({ behavior: 'smooth' });
            
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            document.querySelector('.tab[data-tab="store"]').classList.add('active');
            
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById('store-form').classList.add('active');

            showMessage('Formulário preenchido para edição. Faça as alterações e clique em "Atualizar Item".', 'success');
            
        } catch (error) {
            console.error('Erro ao preparar formulário de edição do item da loja:', error);
            showMessage('Erro ao carregar dados do item da loja para edição', 'error');
        }
    }

    // ========== FUNÇÕES AUXILIARES ==========
    function updateSyncStatus(online) {
        isOnline = online;
        if (syncStatus) {
            if (online) {
                syncStatus.innerHTML = '<span>🔵</span> Conectado';
                syncStatus.classList.remove('offline');
            } else {
                syncStatus.innerHTML = '<span>🔴</span> Modo Offline (Local)';
                syncStatus.classList.add('offline');
            }
        }
    }

    function showLoading(message = 'Carregando...') {
        if (loadingOverlay) {
            loadingOverlay.innerHTML = `<div>${message}</div>`;
            loadingOverlay.style.display = 'flex';
        }
    }

    function hideLoading() {
        if (loadingOverlay) {
            loadingOverlay.style.display = 'none';
        }
    }

    function showButtonLoading(button, loading) {
        if (!button) return;
        
        const span = button.querySelector('span');
        const loadingDiv = button.querySelector('.btn-loading');
        
        if (loading) {
            if (span) span.style.display = 'none';
            if (loadingDiv) loadingDiv.style.display = 'block';
            button.disabled = true;
        } else {
            if (span) span.style.display = 'block';
            if (loadingDiv) loadingDiv.style.display = 'none';
            button.disabled = false;
        }
    }

    // ========== FUNÇÕES DE ANIVERSÁRIO ==========
    function checkIfBirthdayToday(birthday) {
        if (!birthday) return false;
        
        const today = new Date();
        const birthdayDate = new Date(birthday);
        
        return today.getDate() === birthdayDate.getDate() && 
               today.getMonth() === birthdayDate.getMonth();
    }

    function formatBirthday(birthday) {
        if (!birthday) return 'Não informado';
        
        const date = new Date(birthday);
        return date.toLocaleDateString('pt-BR');
    }

    function checkBirthdays() {
        const today = new Date();
        const birthdayMembers = members.filter(member => 
            member.birthday && checkIfBirthdayToday(member.birthday)
        );
        
        if (birthdayMembers.length > 0) {
            showBirthdayReminder(birthdayMembers);
        }
    }

    function showBirthdayReminder(birthdayMembers) {
        if (!birthdayReminder || !birthdayList) return;
        
        birthdayList.innerHTML = '';
        
        birthdayMembers.forEach(member => {
            const memberDiv = document.createElement('div');
            memberDiv.style.marginBottom = '0.5rem';
            memberDiv.innerHTML = `
                <strong>🎉 ${member.name}</strong> - ${member.role}
                ${member.birthday ? `<br><small>Aniversário: ${formatBirthday(member.birthday)}</small>` : ''}
            `;
            birthdayList.appendChild(memberDiv);
        });
        
        birthdayReminder.classList.add('show');
        
        // Fecha automaticamente após 10 segundos
        setTimeout(() => {
            closeBirthdayReminder();
        }, 10000);
    }

    function closeBirthdayReminder() {
        if (birthdayReminder) {
            birthdayReminder.classList.remove('show');
        }
    }

    // ========== FUNÇÕES DE USUÁRIO E LOGIN ==========
    function showUserLoginModal(eventId = null) {
        const modal = document.getElementById('userLoginModal');
        modal.style.display = 'flex';
        
        if (eventId) {
            modal.dataset.eventId = eventId;
        }
    }

    function showAdminLoginModal() {
        const modal = document.getElementById('adminLoginModal');
        modal.style.display = 'flex';
    }

    function hideUserLoginModal() {
        const modal = document.getElementById('userLoginModal');
        modal.style.display = 'none';
    }

    function hideAdminLoginModal() {
        const modal = document.getElementById('adminLoginModal');
        modal.style.display = 'none';
    }

    function isCurrentUserAdmin() {
        return currentUser && currentUser.is_admin === true;
    }

    // ========== CONFIGURAÇÃO DE EVENTOS ==========
    function setupEventListeners() {
        // Tab switching
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', () => {
                const tabId = tab.getAttribute('data-tab');
                
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                    if (content.id === `${tabId}-form`) {
                        content.classList.add('active');
                    }
                });

                resetEditingIds();
            });
        });

        // Form submissions
        if (document.getElementById('memberRegistrationForm')) {
            document.getElementById('memberRegistrationForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const memberPhotoInput = document.getElementById('memberPhoto');
                const memberPhotoFile = memberPhotoInput.files[0];
                
                const memberData = {
                    name: document.getElementById('memberName')?.value || '',
                    email: document.getElementById('memberEmail')?.value || '',
                    phone: document.getElementById('memberPhone')?.value || '',
                    birthday: document.getElementById('memberBirthday')?.value || '',
                    role: document.getElementById('memberRole')?.value || '',
                    linkedin: document.getElementById('memberLinkedin')?.value || '',
                    bio: document.getElementById('memberBio')?.value || '',
                    approved: true // Admin cadastra diretamente aprovado
                };
                
                if (!memberData.name || !memberData.email || !memberData.role || !memberData.birthday) {
                    showMessage('Por favor, preencha todos os campos obrigatórios (Nome, Email, Cargo e Data de Aniversário).', 'error');
                    return;
                }
                
                const success = await saveData('members', memberData, memberPhotoFile, 'memberSubmitBtn', currentEditingMemberId);
                
                if (success) {
                    resetForm('member');
                }
            });
        }

        if (document.getElementById('publicMemberRegistrationForm')) {
            document.getElementById('publicMemberRegistrationForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const memberPhotoInput = document.getElementById('publicMemberPhoto');
                const memberPhotoFile = memberPhotoInput.files[0];
                
                const memberData = {
                    name: document.getElementById('publicMemberName')?.value || '',
                    email: document.getElementById('publicMemberEmail')?.value || '',
                    phone: document.getElementById('publicMemberPhone')?.value || '',
                    birthday: document.getElementById('publicMemberBirthday')?.value || '',
                    role: document.getElementById('publicMemberRole')?.value || '',
                    bio: document.getElementById('publicMemberBio')?.value || '',
                    linkedin: document.getElementById('publicMemberLinkedin')?.value || '',
                    approved: false // Cadastro público fica pendente
                };
                
                if (!memberData.name || !memberData.email || !memberData.role || !memberData.phone || !memberData.birthday) {
                    showMessage('Por favor, preencha todos os campos obrigatórios (Nome, Email, Telefone, Cargo e Data de Aniversário).', 'error');
                    return;
                }
                
                const success = await saveData('members', memberData, memberPhotoFile, 'publicMemberSubmitBtn');
                
                if (success) {
                    resetForm('publicMember');
                    showMessage('✅ Cadastro enviado para aprovação! Aguarde a liberação do administrador.', 'success');
                }
            });
        }

        if (document.getElementById('eventRegistrationForm')) {
            document.getElementById('eventRegistrationForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const eventData = {
                    title: document.getElementById('eventTitle')?.value || '',
                    event_date: document.getElementById('eventDate')?.value || '',
                    event_time: document.getElementById('eventTime')?.value || '',
                    location: document.getElementById('eventLocation')?.value || '',
                    description: document.getElementById('eventDescription')?.value || ''
                };
                
                if (!eventData.title || !eventData.event_date || !eventData.event_time || !eventData.location) {
                    showMessage('Por favor, preencha todos os campos obrigatórios.', 'error');
                    return;
                }
                
                // Verifica se há fotos selecionadas
                const totalPhotos = eventPhotosFiles.length + (currentEditingEventPhotos?.length || 0);
                if (totalPhotos === 0) {
                    if (!confirm('Nenhuma foto foi selecionada para o evento. Deseja continuar sem fotos?')) {
                        return;
                    }
                }
                
                console.log(`📝 Salvando evento "${eventData.title}" com ${eventPhotosFiles.length} fotos novas e ${currentEditingEventPhotos ? currentEditingEventPhotos.length : 0} fotos existentes`);
                
                // CORREÇÃO: Passa null para imageFiles pois as fotos são gerenciadas pelas variáveis globais
                const success = await saveData('events', eventData, null, 'eventSubmitBtn', currentEditingEventId);
                
                if (success) {
                    resetForm('event');
                }
            });
        }

        if (document.getElementById('partnerRegistrationForm')) {
            document.getElementById('partnerRegistrationForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const partnerLogoInput = document.getElementById('partnerLogo');
                const partnerLogoFile = partnerLogoInput.files[0];
                
                const partnerData = {
                    name: document.getElementById('partnerName')?.value || '',
                    category: document.getElementById('partnerCategory')?.value || '',
                    website: document.getElementById('partnerWebsite')?.value || '',
                    contact: document.getElementById('partnerContact')?.value || '',
                    description: document.getElementById('partnerDescription')?.value || ''
                };
                
                if (!partnerData.name || !partnerData.category || !partnerData.description) {
                    showMessage('Por favor, preencha todos os campos obrigatórios (Nome, Categoria e Descrição).', 'error');
                    return;
                }
                
                const success = await saveData('partners', partnerData, partnerLogoFile, 'partnerSubmitBtn', currentEditingPartnerId);
                
                if (success) {
                    resetForm('partner');
                }
            });
        }

        if (document.getElementById('storeRegistrationForm')) {
            document.getElementById('storeRegistrationForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const storeItemPhotoInput = document.getElementById('storeItemPhoto');
                const storeItemPhotoFile = storeItemPhotoInput.files[0];
                
                const storeItemData = {
                    name: document.getElementById('storeItemName')?.value || '',
                    category: document.getElementById('storeItemCategory')?.value || '',
                    price: document.getElementById('storeItemPrice')?.value || '',
                    stock: document.getElementById('storeItemStock')?.value || '0',
                    description: document.getElementById('storeItemDescription')?.value || '',
                    link: document.getElementById('storeItemLink')?.value || ''
                };
                
                if (!storeItemData.name || !storeItemData.category || !storeItemData.price || !storeItemData.description) {
                    showMessage('Por favor, preencha todos os campos obrigatórios (Nome, Categoria, Preço e Descrição).', 'error');
                    return;
                }
                
                const success = await saveData('store_items', storeItemData, storeItemPhotoFile, 'storeSubmitBtn', currentEditingStoreItemId);
                
                if (success) {
                    resetForm('store');
                }
            });
        }

        // Image upload handlers
        setupImageUpload('memberPhoto', 'memberPhotoPreview');
        setupImageUpload('publicMemberPhoto', 'publicMemberPhotoPreview');
        setupImageUpload('partnerLogo', 'partnerLogoPreview');
        setupImageUpload('storeItemPhoto', 'storeItemPhotoPreview');
        setupMultiplePhotosUpload();

        // User login form
        if (document.getElementById('userLoginForm')) {
            document.getElementById('userLoginForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const userName = document.getElementById('userName').value;
                const userEmail = document.getElementById('userEmail').value;
                
                if (!userName) {
                    showMessage('Por favor, digite seu nome.', 'error');
                    return;
                }
                
                currentUser = {
                    id: 'user_' + Date.now(),
                    name: userName,
                    email: userEmail,
                    is_admin: false
                };
                
                const currentUsers = loadFromLocalStorage('current_users') || [];
                currentUsers.push(currentUser);
                saveToLocalStorage('current_users', currentUsers);
                
                showMessage(`Bem-vindo, ${userName}!`, 'success');
                hideUserLoginModal();
                
                const modal = document.getElementById('userLoginModal');
                if (modal.dataset.eventId) {
                    const eventId = modal.dataset.eventId;
                    toggleEventChat(eventId);
                    delete modal.dataset.eventId;
                }
            });
        }

        // Admin login form
        if (document.getElementById('adminLoginForm')) {
            document.getElementById('adminLoginForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const password = document.getElementById('adminLoginPassword').value;
                
                if (!password) {
                    showMessage('Por favor, digite a senha de administrador.', 'error');
                    return;
                }
                
                if (password !== adminPassword) {
                    showMessage('Senha de administrador incorreta.', 'error');
                    return;
                }
                
                // Se não há usuário atual, cria um
                if (!currentUser) {
                    currentUser = {
                        id: 'admin_' + Date.now(),
                        name: 'Administrador',
                        email: 'admin@system.com',
                        is_admin: true
                    };
                } else {
                    currentUser.is_admin = true;
                }
                
                const currentUsers = loadFromLocalStorage('current_users') || [];
                currentUsers.push(currentUser);
                saveToLocalStorage('current_users', currentUsers);
                
                showMessage('✅ Acesso de administrador concedido! Agora você pode cadastrar e gerenciar itens.', 'success');
                hideAdminLoginModal();
                
                // Atualiza a UI para mostrar as seções de admin
                updateUIForAdmin();
            });
        }

        // Mobile menu
        const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
        if (mobileMenuBtn) {
            mobileMenuBtn.addEventListener('click', function() {
                const navUl = document.querySelector('nav ul');
                if (navUl) navUl.classList.toggle('show');
            });
        }

        // Smooth scrolling
        document.querySelectorAll('nav a, .btn').forEach(anchor => {
            anchor.addEventListener('click', function(e) {
                const targetId = this.getAttribute('href');
                
                // Verifica se é um link interno (#)
                if (targetId && targetId.startsWith('#')) {
                    e.preventDefault();
                    const targetElement = document.querySelector(targetId);
                    
                    if (targetElement) {
                        // Calcula a posição considerando o header fixo
                        const headerHeight = document.querySelector('header').offsetHeight;
                        const targetPosition = targetElement.offsetTop - headerHeight - 20;
                        
                        window.scrollTo({
                            top: targetPosition,
                            behavior: 'smooth'
                        });
                        
                        // Fecha o menu mobile se estiver aberto
                        const navUl = document.querySelector('nav ul');
                        if (navUl) navUl.classList.remove('show');
                        
                        // Atualiza a classe active no menu
                        document.querySelectorAll('nav a').forEach(link => {
                            link.classList.remove('active');
                        });
                        this.classList.add('active');
                    }
                }
            });
        });
    }

    function setupImageUpload(inputId, previewId) {
        const input = document.getElementById(inputId);
        const preview = document.getElementById(previewId);
        
        if (!input || !preview) return;
        
        input.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                if (!file.type.startsWith('image/')) {
                    showMessage('Por favor, selecione um arquivo de imagem.', 'error');
                    return;
                }
                
                if (file.size > 5 * 1024 * 1024) {
                    showMessage('A imagem deve ter menos de 5MB.', 'error');
                    return;
                }
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.innerHTML = `<img src="${e.target.result}" alt="Preview">`;
                };
                reader.onerror = function() {
                    showMessage('Erro ao carregar a imagem.', 'error');
                };
                reader.readAsDataURL(file);
            }
        });
    }

    function setupMultiplePhotosUpload() {
        const input = document.getElementById('eventPhotos');
        const preview = document.getElementById('eventPhotosPreview');
        const uploadArea = document.getElementById('eventPhotosUploadArea');
        
        if (!input || !preview || !uploadArea) return;
        
        // Clique na área de upload
        uploadArea.addEventListener('click', () => {
            input.click();
        });
        
        // Arrastar e soltar
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = '#3498db';
            uploadArea.style.backgroundColor = 'rgba(52, 152, 219, 0.1)';
        });
        
        uploadArea.addEventListener('dragleave', () => {
            uploadArea.style.borderColor = '#ddd';
            uploadArea.style.backgroundColor = '';
        });
        
        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = '#ddd';
            uploadArea.style.backgroundColor = '';
            
            const files = e.dataTransfer.files;
            handleMultiplePhotos(files);
        });
        
        // Mudança no input de arquivo
        input.addEventListener('change', (e) => {
            handleMultiplePhotos(e.target.files);
        });
        
        function handleMultiplePhotos(files) {
            if (!files || files.length === 0) return;
            
            const validFiles = Array.from(files).filter(file => {
                const isValid = file.type.startsWith('image/') && file.size <= 5 * 1024 * 1024;
                if (!isValid) {
                    console.warn(`Arquivo inválido: ${file.name} - Tipo: ${file.type} - Tamanho: ${file.size}`);
                }
                return isValid;
            });
            
            if (validFiles.length === 0) {
                showMessage('Por favor, selecione apenas imagens válidas (JPG, PNG, etc. - máx. 5MB cada).', 'error');
                return;
            }
            
            // Limita a 20 fotos no total (existentes + novas)
            const filesToProcess = validFiles.slice(0, 20);
            const totalAfterAdd = (currentEditingEventPhotos?.length || 0) + eventPhotosFiles.length + filesToProcess.length;
            
            if (totalAfterAdd > 20) {
                showMessage(`Máximo de 20 fotos permitido. Você já tem ${(currentEditingEventPhotos?.length || 0) + eventPhotosFiles.length} fotos.`, 'warning');
                return;
            }
            
            // Adiciona ao array global de novas fotos
            eventPhotosFiles = [...eventPhotosFiles, ...filesToProcess];
            
            // Atualiza o preview combinando fotos existentes e novas
            updateExistingPhotosPreview();
            
            showMessage(`${filesToProcess.length} nova(s) foto(s) adicionada(s)! Total: ${(currentEditingEventPhotos?.length || 0) + eventPhotosFiles.length}`, 'success');
            
            if (validFiles.length > filesToProcess.length) {
                showMessage(`Apenas as primeiras ${filesToProcess.length} fotos foram processadas (limite: 20).`, 'warning');
            }
        }
        
        // Inicializa o texto da área de upload
        uploadArea.innerHTML = `
            <p>📷 Clique aqui ou arraste fotos para adicionar</p>
            <p style="font-size: 0.8rem; color: #666;">Você pode selecionar várias fotos (máx. 20)</p>
        `;
    }

    // Função para remover foto NOVA do evento (ainda não salva)
    function removeEventPhoto(index) {
        eventPhotosFiles.splice(index, 1);
        
        // Atualiza o preview combinado
        updateExistingPhotosPreview();
    }

    // Função para remover fotos existentes durante a edição
    function removeExistingEventPhoto(index) {
        if (!confirm('Tem certeza que deseja remover esta foto do evento?')) {
            return;
        }
        
        // Adiciona a foto à lista de fotos para deletar
        const photoUrl = currentEditingEventPhotos[index];
        photosToDelete.push(photoUrl);
        
        // Remove a foto do array atual
        currentEditingEventPhotos.splice(index, 1);
        
        // Atualiza o preview
        updateExistingPhotosPreview();
        
        showMessage('Foto marcada para remoção. Clique em "Atualizar Evento" para confirmar.', 'warning');
    }

    // Função para atualizar o preview das fotos existentes
    function updateExistingPhotosPreview() {
        const preview = document.getElementById('eventPhotosPreview');
        preview.innerHTML = '';
        
        // Mostra fotos existentes
        currentEditingEventPhotos.forEach((photoUrl, index) => {
            const photoItem = document.createElement('div');
            photoItem.className = 'photo-preview-item';
            photoItem.innerHTML = `
                <img src="${photoUrl}" alt="Foto existente ${index + 1}">
                <button type="button" class="remove-photo" onclick="removeExistingEventPhoto(${index})" title="Remover foto">×</button>
                <div style="position: absolute; bottom: 5px; left: 5px; background: rgba(0,0,0,0.7); color: white; padding: 2px 5px; border-radius: 3px; font-size: 0.7rem;">
                    ${index + 1}
                </div>
            `;
            preview.appendChild(photoItem);
        });
        
        // Mostra novas fotos adicionadas
        eventPhotosFiles.forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = function(e) {
                const photoItem = document.createElement('div');
                photoItem.className = 'photo-preview-item';
                photoItem.innerHTML = `
                    <img src="${e.target.result}" alt="Nova foto ${index + 1}">
                    <button type="button" class="remove-photo" onclick="removeEventPhoto(${index})" title="Remover foto">×</button>
                    <div style="position: absolute; bottom: 5px; left: 5px; background: rgba(52, 152, 219, 0.8); color: white; padding: 2px 5px; border-radius: 3px; font-size: 0.7rem;">
                        Novo
                    </div>
                `;
                preview.appendChild(photoItem);
            };
            reader.readAsDataURL(file);
        });
        
        // Atualiza o texto da área de upload
        const uploadArea = document.getElementById('eventPhotosUploadArea');
        const totalPhotos = currentEditingEventPhotos.length + eventPhotosFiles.length;
        
        if (totalPhotos === 0) {
            uploadArea.innerHTML = `
                <p>📷 Clique aqui ou arraste fotos para adicionar</p>
                <p style="font-size: 0.8rem; color: #666;">Você pode selecionar várias fotos (máx. 20)</p>
            `;
        } else {
            uploadArea.innerHTML = `
                <p>📷 ${totalPhotos} foto(s) no total (${currentEditingEventPhotos.length} existente(s) + ${eventPhotosFiles.length} nova(s))</p>
                <p style="font-size: 0.8rem; color: #666;">Clique ou arraste para adicionar mais fotos</p>
            `;
        }
    }

    function resetForm(type) {
        let form, submitText, preview, photosPreview;
        
        switch(type) {
            case 'member':
                form = document.getElementById('memberRegistrationForm');
                submitText = document.getElementById('memberSubmitText');
                preview = document.getElementById('memberPhotoPreview');
                currentEditingMemberId = null;
                break;
               
            case 'publicMember':
                form = document.getElementById('publicMemberRegistrationForm');
                submitText = document.getElementById('publicMemberSubmitText');
                preview = document.getElementById('publicMemberPhotoPreview');
                break;
                
            case 'event':
                form = document.getElementById('eventRegistrationForm');
                submitText = document.getElementById('eventSubmitText');
                photosPreview = document.getElementById('eventPhotosPreview');
                
                //CRUCIAL: Resetar todas as variáveis de fotos de evento
                eventPhotosFiles = [];
                currentEditingEventId = null;
                currentEditingEventPhotos = [];
                photosToDelete = [];
                
                // Reseta a área de upload
                const uploadArea = document.getElementById('eventPhotosUploadArea');
                if (uploadArea) {
                    uploadArea.innerHTML = `
                        <p>📷 Clique aqui ou arraste fotos para adicionar</p>
                        <p style="font-size: 0.8rem; color: #666;">Você pode selecionar várias fotos (máx. 20)</p>
                    `;
                }
                
                // Limpa o preview
                if (photosPreview) {
                    photosPreview.innerHTML = '';
                }
                break;
                
            case 'partner':
                form = document.getElementById('partnerRegistrationForm');
                submitText = document.getElementById('partnerSubmitText');
                preview = document.getElementById('partnerLogoPreview');
                currentEditingPartnerId = null;
                break;
                
            case 'store':
                form = document.getElementById('storeRegistrationForm');
                submitText = document.getElementById('storeSubmitText');
                preview = document.getElementById('storeItemPhotoPreview');
                currentEditingStoreItemId = null;
                break;
        }
        
        if (form) form.reset();
        if (preview) {
            if (type === 'partner') {
                preview.innerHTML = '<div class="placeholder">Logo do Parceiro</div>';
            } else if (type === 'store') {
                preview.innerHTML = '<div class="placeholder">Foto do Produto</div>';
            } else {
                preview.innerHTML = '<div class="placeholder">Foto do Membro</div>';
            }
        }
        if (submitText) {
            submitText.textContent = type === 'publicMember' ? 'Enviar para Aprovação' : `Cadastrar ${getEntityName(type)}`;
        }
        
        console.log(`🔄 Formulário ${type} resetado com sucesso`);
    }

    function resetEditingIds() {
        currentEditingMemberId = null;
        currentEditingEventId = null;
        currentEditingPartnerId = null;
        currentEditingStoreItemId = null;
        
        // Limpa as variáveis de fotos de evento
        currentEditingEventPhotos = [];
        photosToDelete = [];
        eventPhotosFiles = [];
        
        document.getElementById('memberSubmitText').textContent = 'Cadastrar Membro';
        document.getElementById('eventSubmitText').textContent = 'Cadastrar Evento';
        document.getElementById('partnerSubmitText').textContent = 'Cadastrar Parceiro';
        document.getElementById('storeSubmitText').textContent = 'Cadastrar Item';
    }

    // Funções de exclusão específicas
    async function deleteMember(memberId) {
        try {
            console.log('🗑️ Iniciando exclusão do membro ID:', memberId);
            
            // Procura o membro em TODAS as listas possíveis
            let member = null;
            
            // 1. Procura nos membros aprovados
            member = members.find(m => m.id === memberId);
            
            // 2. Se não encontrou, procura nos membros pendentes
            if (!member) {
                member = pendingMembers.find(m => m.id === memberId);
            }
            
            // 3. Se ainda não encontrou, procura no localStorage completo
            if (!member) {
                const allMembers = loadFromLocalStorage('members') || [];
                member = allMembers.find(m => m.id === memberId);
            }
            
            if (!member) {
                throw new Error(`Membro com ID ${memberId} não encontrado em nenhuma lista`);
            }

            console.log('📋 Membro encontrado:', member.name);

            if (!confirm(`Tem certeza que deseja excluir o membro "${member.name}"?`)) {
                return;
            }

            showLoading('Excluindo membro...');

            // Remove do banco de dados (se online)
            if (isOnline) {
                console.log('🌐 Removendo do Supabase...');
                const { error } = await supabase
                    .from('members')
                    .delete()
                    .eq('id', memberId);
                
                if (error) {
                    console.error('❌ Erro do Supabase:', error);
                    // Continua mesmo com erro, para tentar remover localmente
                } else {
                    console.log('✅ Removido do Supabase');
                }
            }

            // Remove do localStorage - abordagem mais direta
            console.log('💾 Atualizando localStorage...');
            const allMembers = loadFromLocalStorage('members') || [];
            const updatedMembers = allMembers.filter(m => m.id !== memberId);
            saveToLocalStorage('members', updatedMembers);
            console.log('✅ localStorage atualizado - removidos:', allMembers.length - updatedMembers.length, 'membros');

            // Atualiza as variáveis globais
            members = members.filter(m => m.id !== memberId);
            pendingMembers = pendingMembers.filter(m => m.id !== memberId);
            
            console.log('🔄 Atualizando interface...');
            
            // Atualiza a interface
            renderMembers();
            if (isCurrentUserAdmin()) {
                renderPendingMembers();
            }
            
            // Atualiza o card de aniversariantes do mês
            renderBirthdayMonthCard();
            
            console.log('✅ Exclusão concluída com sucesso');
            showMessage(`✅ Membro "${member.name}" excluído com sucesso!`, 'success');

        } catch (error) {
            console.error('❌ Erro completo ao excluir membro:', error);
            showMessage(`Erro ao excluir membro: ${error.message}`, 'error');
        } finally {
            hideLoading();
        }
    }

    async function deleteEvent(eventId) {
        await deleteItem('events', eventId);
    }

    async function deletePartner(partnerId) {
        await deleteItem('partners', partnerId);
    }

    async function deleteStoreItem(itemId) {
        await deleteItem('store_items', itemId);
    }

    // ========== FUNÇÃO PARA APROVAR MEMBROS ==========
    async function approveMember(memberId) {
        try {
            showLoading('Aprovando membro...');
            
            const memberToApprove = pendingMembers.find(m => m.id == memberId);
            if (!memberToApprove) {
                throw new Error('Membro não encontrado');
            }
            
            if (isOnline) {
                const { error } = await supabase
                    .from('members')
                    .update({ approved: true, updated_at: new Date().toISOString() })
                    .eq('id', memberId);
                
                if (error) throw error;
            }
            
            // Atualiza localmente
            const allMembers = loadFromLocalStorage('members') || [];
            const memberIndex = allMembers.findIndex(m => m.id == memberId);
            if (memberIndex !== -1) {
                allMembers[memberIndex] = {
                    ...allMembers[memberIndex],
                    approved: true,
                    updated_at: new Date().toISOString()
                };
                saveToLocalStorage('members', allMembers);
            }
            
            // Recarrega os membros
            await loadMembers();
            
            showMessage('✅ Membro aprovado com sucesso!', 'success');
            
        } catch (error) {
            console.error('Erro ao aprovar membro:', error);
            showMessage('Erro ao aprovar membro: ' + error.message, 'error');
        } finally {
            hideLoading();
        }
    }

    // ========== FUNÇÕES DA GALERIA ==========
    function openGallery(eventId, photoIndex = 0) {
        const event = events.find(e => e.id == eventId);
        if (!event || !event.photos || event.photos.length === 0) {
            showMessage('Este evento não possui fotos.', 'warning');
            return;
        }
        
        currentGalleryEvent = event;
        currentPhotoIndex = photoIndex;
        
        showPhoto();
        galleryModal.style.display = 'flex';
        
        // Previne scroll do body quando a galeria está aberta
        document.body.style.overflow = 'hidden';
        
        // Foco no botão fechar para melhor acessibilidade
        setTimeout(() => {
            const closeBtn = document.querySelector('.gallery-modal-close');
            if (closeBtn) closeBtn.focus();
        }, 100);
        
        console.log('🖼️ Galeria aberta:', event.title, '- Fotos:', event.photos.length);
    }

    function closeGallery() {
        galleryModal.style.display = 'none';
        currentGalleryEvent = null;
        currentPhotoIndex = 0;
        
        // Restaura scroll do body
        document.body.style.overflow = '';
        
        console.log('🚪 Galeria fechada');
    }

    function showPhoto() {
        if (!currentGalleryEvent || !currentGalleryEvent.photos) return;
        
        const photos = currentGalleryEvent.photos;
        if (photos.length === 0) return;
        
        galleryImage.src = photos[currentPhotoIndex];
        galleryCounter.innerHTML = `
            ${currentPhotoIndex + 1} / ${photos.length}
            <div style="font-size: 0.7rem; margin-top: 5px; opacity: 0.7;">
                Use ← → ou ESC para fechar
            </div>
        `;
        
        // Adiciona loading state
        galleryImage.onload = function() {
            this.style.opacity = '1';
        };
        galleryImage.style.opacity = '0.7';
        galleryImage.style.transition = 'opacity 0.3s ease';
    }

    function nextPhoto() {
        if (!currentGalleryEvent || !currentGalleryEvent.photos) return;
        
        const photos = currentGalleryEvent.photos;
        currentPhotoIndex = (currentPhotoIndex + 1) % photos.length;
        showPhoto();
    }

    function prevPhoto() {
        if (!currentGalleryEvent || !currentGalleryEvent.photos) return;
        
        const photos = currentGalleryEvent.photos;
        currentPhotoIndex = (currentPhotoIndex - 1 + photos.length) % photos.length;
        showPhoto();
    }

    // Fechar galeria com ESC ou clicando fora da imagem
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && galleryModal.style.display === 'flex') {
            closeGallery();
        }
        
        // Navegação com teclado
        if (galleryModal.style.display === 'flex') {
            if (e.key === 'ArrowRight') nextPhoto();
            if (e.key === 'ArrowLeft') prevPhoto();
        }
    });

    // Fechar ao clicar no fundo escuro (fora da imagem)
    galleryModal.addEventListener('click', (e) => {
        if (e.target === galleryModal) {
            closeGallery();
        }
    });

    // ========== FUNÇÕES DO CHAT ==========
    async function loadEventChats() {
        try {
            if (isOnline) {
                const { data, error } = await supabase
                    .from('event_chats')
                    .select('*')
                    .order('created_at', { ascending: true });
                
                if (error) throw error;
                
                eventChats = {};
                data.forEach(message => {
                    if (!eventChats[message.event_id]) {
                        eventChats[message.event_id] = [];
                    }
                    eventChats[message.event_id].push(message);
                });
                
                saveToLocalStorage('event_chats', data);
            } else {
                const allChats = loadFromLocalStorage('event_chats') || [];
                eventChats = {};
                allChats.forEach(message => {
                    if (!eventChats[message.event_id]) {
                        eventChats[message.event_id] = [];
                    }
                    eventChats[message.event_id].push(message);
                });
            }
        } catch (error) {
            console.error('Erro ao carregar chats:', error);
        }
    }

    async function sendEventMessage(eventId, messageText) {
        try {
            if (!currentUser) {
                showUserLoginModal(eventId);
                return false;
            }

            const newMessage = {
                event_id: eventId,
                sender_id: currentUser.id,
                sender_name: currentUser.name,
                sender_email: currentUser.email,
                message: messageText,
                created_at: new Date().toISOString()
            };

            if (isOnline) {
                const { data, error } = await supabase
                    .from('event_chats')
                    .insert([newMessage])
                    .select();
                
                if (error) throw error;
                
                if (!eventChats[eventId]) {
                    eventChats[eventId] = [];
                }
                eventChats[eventId].push(data[0]);
                
                const allChats = loadFromLocalStorage('event_chats') || [];
                allChats.push(data[0]);
                saveToLocalStorage('event_chats', allChats);
            } else {
                newMessage.id = 'msg_' + Date.now();
                if (!eventChats[eventId]) {
                    eventChats[eventId] = [];
                }
                eventChats[eventId].push(newMessage);
                
                const allChats = loadFromLocalStorage('event_chats') || [];
                allChats.push(newMessage);
                saveToLocalStorage('event_chats', allChats);
            }

            renderEventChat(eventId);
            return true;
        } catch (error) {
            console.error('Erro ao enviar mensagem:', error);
            showMessage('Erro ao enviar mensagem: ' + error.message, 'error');
            return false;
        }
    }

    function renderEventChat(eventId) {
        const chatContainer = document.getElementById(`event-chat-${eventId}`);
        if (!chatContainer) return;

        const messagesContainer = chatContainer.querySelector('.event-chat-messages');
        const messages = eventChats[eventId] || [];

        messagesContainer.innerHTML = '';

        if (messages.length === 0) {
            messagesContainer.innerHTML = `
                <div class="no-chat-messages">
                    Nenhuma mensagem ainda. Seja o primeiro a comentar sobre este evento!
                </div>
            `;
            return;
        }

        messages.forEach(message => {
            const messageDiv = document.createElement('div');
            const isCurrentUser = message.sender_id === currentUser?.id;
            
            messageDiv.className = `event-message ${isCurrentUser ? 'sent' : 'received'}`;
            
            const messageDate = new Date(message.created_at);
            const timeString = messageDate.toLocaleTimeString('pt-BR', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
            
            messageDiv.innerHTML = `
                <div class="event-message-bubble">
                    ${message.message}
                </div>
                <div class="event-message-info">
                    ${message.sender_name} • ${timeString}
                </div>
            `;
            
            messagesContainer.appendChild(messageDiv);
        });

        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function toggleEventChat(eventId) {
        const chatContainer = document.getElementById(`event-chat-${eventId}`);
        if (!chatContainer) return;

        const messagesContainer = chatContainer.querySelector('.event-chat-messages');
        const inputContainer = chatContainer.querySelector('.event-chat-input-container');
        const toggleButton = chatContainer.querySelector('.event-chat-toggle');

        const isOpen = messagesContainer.classList.contains('open');
        
        if (isOpen) {
            messagesContainer.classList.remove('open');
            inputContainer.classList.remove('open');
            toggleButton.textContent = 'Abrir Chat';
        } else {
            messagesContainer.classList.add('open');
            inputContainer.classList.add('open');
            toggleButton.textContent = 'Fechar Chat';
            
            if (!eventChats[eventId]) {
                loadEventChats().then(() => {
                    renderEventChat(eventId);
                });
            } else {
                renderEventChat(eventId);
            }
            
            const input = inputContainer.querySelector('.event-chat-input');
            setTimeout(() => input.focus(), 100);
        }
    }

    function setupEventChat(eventId) {
        const chatContainer = document.getElementById(`event-chat-${eventId}`);
        if (!chatContainer) return;

        const input = chatContainer.querySelector('.event-chat-input');
        const sendButton = chatContainer.querySelector('.event-chat-send-btn');

        const sendMessageHandler = () => {
            const messageText = input.value.trim();
            if (!messageText) return;

            sendEventMessage(eventId, messageText).then(success => {
                if (success) {
                    input.value = '';
                }
            });
        };

        sendButton.addEventListener('click', sendMessageHandler);
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessageHandler();
            }
        });
    }

    // Função para lidar com erro de carregamento da logo
    function handleLogoError(img) {
        console.log('❌ Erro ao carregar logo principal, tentando alternativas...');
        
        const alternatives = [
            'https://jywmvnxurbtziixntuuq.supabase.co/storage/v1/object/public/Imagens/LogoNet.jpeg',
            'https://jywmvnxurbtziixntuuq.supabase.co/storage/v1/object/public/Imagens/LogoS.jpeg',
            'https://images.unsplash.com/photo-1611162617474-5b21e879e113?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'
        ];
        
        let currentIndex = 0;
        
        function tryNext() {
            if (currentIndex < alternatives.length) {
                img.src = alternatives[currentIndex];
                currentIndex++;
            }
        }
        
        img.onerror = tryNext;
        tryNext();
    }

    // ========== CONTROLE DE VISIBILIDADE PARA ADMIN ==========
    function updateUIForAdmin() {
        const isAdmin = isCurrentUserAdmin();
        const cadastroSection = document.getElementById('cadastro');
        const cadastroMenu = document.getElementById('cadastroMenu');
        const publicRegistrationMenu = document.getElementById('publicRegistrationMenu');
        const logoutBtn = document.getElementById('logoutBtn');
        const adminAccessBtn = document.querySelector('.admin-access-btn');
        
        // Controle da seção de cadastro
        if (cadastroSection) {
            cadastroSection.style.display = isAdmin ? 'block' : 'none';
        }
        
        // Controle do menu de cadastro
        if (cadastroMenu) {
            cadastroMenu.style.display = isAdmin ? 'list-item' : 'none';
        }
        
        // Controle do menu de cadastro público
        if (publicRegistrationMenu) {
            publicRegistrationMenu.style.display = isAdmin ? 'none' : 'list-item';
        }
        
        // Controle dos botões
        if (logoutBtn) {
            logoutBtn.style.display = currentUser ? 'inline-block' : 'none';
        }
        
        if (adminAccessBtn) {
            adminAccessBtn.style.display = currentUser ? 'none' : 'inline-block';
        }
        
        // Recarrega as listas para mostrar/ocultar botões de edição
        if (membersList) renderMembers();
        if (eventsContainer) renderEvents();
        if (partnersList) renderPartners();
        if (storeItemsList) renderStoreItems();
        
        // Mostra membros pendentes se for admin
        if (isAdmin && pendingMembersList) {
            renderPendingMembers();
        }
        
        console.log('👤 Interface atualizada para:', isAdmin ? 'Administrador' : currentUser ? 'Usuário Normal' : 'Visitante');
    }

    // Função para logout
    function logout() {
        currentUser = null;
        const currentUsers = loadFromLocalStorage('current_users') || [];
        // Remove o último usuário (mais recente)
        if (currentUsers.length > 0) {
            currentUsers.pop();
            saveToLocalStorage('current_users', currentUsers);
        }
        
        showMessage('👋 Logout realizado com sucesso!', 'success');
        updateUIForAdmin();
    }

    // Adicione um botão de logout no header
    function addLogoutButton() {
        const headerContent = document.querySelector('.header-content');
        const adminAccessBtn = document.querySelector('.admin-access-btn');
        
        if (headerContent && !document.getElementById('logoutBtn')) {
            const logoutBtn = document.createElement('button');
            logoutBtn.id = 'logoutBtn';
            logoutBtn.className = 'admin-access-btn logout';
            logoutBtn.style.display = 'none';
            logoutBtn.style.marginLeft = '10px';
            logoutBtn.innerHTML = '🚪 Sair';
            logoutBtn.onclick = logout;
            
            adminAccessBtn.parentNode.insertBefore(logoutBtn, adminAccessBtn.nextSibling);
        }
    }

    // ========== INICIALIZAÇÃO ==========
    async function initializeApp() {
        try {
            console.log('🚀 Inicializando aplicação...');
            
            // Inicializa variáveis globais
            users = [];
            members = [];
            pendingMembers = [];
            events = [];
            partners = [];
            storeItems = [];
            eventChats = {};
            eventPhotosFiles = [];
            
            const supabaseInitialized = await initializeSupabase();
            
            // Verifica se há usuário atual salvo
            const currentUsers = loadFromLocalStorage('current_users') || [];
            if (currentUsers.length > 0) {
                currentUser = currentUsers[currentUsers.length - 1];
                console.log('👤 Usuário atual recuperado:', currentUser);
            }
            
            // Adiciona botão de logout
            addLogoutButton();
            
            setupEventListeners();
            setupMobileMenu();
            
            // Carrega dados
            console.log('📥 Carregando dados...');
            await Promise.all([
                loadUsers(),
                loadMembers(),
                loadEvents(),
                loadPartners(),
                loadStoreItems(),
                loadEventChats()
            ]);
            
            // Atualiza a UI baseado no tipo de usuário
            updateUIForAdmin();
            
            // Verifica o estado do card de aniversariantes do mês
            const storedState = localStorage.getItem('birthdayMonthCardExpanded');
            if (storedState === 'false') {
                toggleBirthdayMonthCard(false);
            }
            
            if (supabaseInitialized) {
                showMessage('✅ Sistema conectado!', 'success');
            } else {
                showMessage('📴 Sistema em modo offline. Dados salvos localmente.', 'warning');
            }
            
            console.log('🎉 Aplicação inicializada com sucesso!');
            
        } catch (error) {
            console.error('❌ Erro na inicialização do app:', error);
            showMessage('❌ Erro ao inicializar o sistema: ' + error.message, 'error');
        }
    }

    // Menu Mobile Functionality
    function setupMobileMenu() {
        const mobileMenuBtn = document.getElementById('mobileMenuBtn');
        const mobileNav = document.getElementById('mobileNav');
        
        if (mobileMenuBtn && mobileNav) {
            mobileMenuBtn.addEventListener('click', function() {
                mobileMenuBtn.classList.toggle('active');
                mobileNav.classList.toggle('show');
                
                // Fecha o menu ao clicar em um link
                const mobileLinks = mobileNav.querySelectorAll('a');
                mobileLinks.forEach(link => {
                    link.addEventListener('click', () => {
                        mobileMenuBtn.classList.remove('active');
                        mobileNav.classList.remove('show');
                    });
                });
            });
            
            // Fecha o menu ao clicar fora
            document.addEventListener('click', function(event) {
                if (!mobileMenuBtn.contains(event.target) && !mobileNav.contains(event.target)) {
                    mobileMenuBtn.classList.remove('active');
                    mobileNav.classList.remove('show');
                }
            });
        }
    }

    // Atualiza os menus mobile quando o usuário faz login/logout
    function updateMobileMenus() {
        const isAdmin = isCurrentUserAdmin();
        const cadastroMenuMobile = document.getElementById('cadastroMenuMobile');
        const publicRegistrationMenuMobile = document.getElementById('publicRegistrationMenuMobile');
        
        if (cadastroMenuMobile) {
            cadastroMenuMobile.style.display = isAdmin ? 'block' : 'none';
        }
        
        if (publicRegistrationMenuMobile) {
            publicRegistrationMenuMobile.style.display = isAdmin ? 'none' : 'block';
        }
    }

    // Inicia a aplicação quando o DOM estiver pronto
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(initializeApp, 100);
        });
    } else {
        setTimeout(initializeApp, 100);
    }

// Função para debug - verificar se o bucket existe e tem permissões
async function debugStorage() {
    try {
        console.log('🔍 Verificando configuração do storage...');
        
        // Tenta listar os buckets disponíveis
        const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
        
        if (bucketsError) {
            console.error('❌ Erro ao listar buckets:', bucketsError);
        } else {
            console.log('✅ Buckets disponíveis:', buckets.map(b => b.name));
        }
        
        // Verifica o bucket de eventos
        const { data: eventsFiles, error: eventsError } = await supabase.storage
            .from('events-photos')
            .list();
            
        if (eventsError) {
            console.error('❌ Erro ao acessar bucket events-photos:', eventsError);
        } else {
            console.log(`✅ Bucket events-photos contém ${eventsFiles.length} arquivos`);
        }
        
    } catch (error) {
        console.error('❌ Erro no debug do storage:', error);
    }
}

// Chame esta função durante a inicialização para verificar
// debugStorage();
</script>
    
</body>
</html>




